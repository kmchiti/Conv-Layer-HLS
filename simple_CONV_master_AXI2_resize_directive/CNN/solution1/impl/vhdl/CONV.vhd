-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CONV is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_img_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_img_ce0 : OUT STD_LOGIC;
    input_img_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_offset : IN STD_LOGIC_VECTOR (7 downto 0);
    bias : IN STD_LOGIC_VECTOR (7 downto 0);
    output_img_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_img_ce0 : OUT STD_LOGIC;
    output_img_we0 : OUT STD_LOGIC;
    output_img_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of CONV is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv14_2710 : STD_LOGIC_VECTOR (13 downto 0) := "10011100010000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv17_151A4 : STD_LOGIC_VECTOR (16 downto 0) := "10101000110100100";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv16_708C : STD_LOGIC_VECTOR (15 downto 0) := "0111000010001100";
    constant ap_const_lv7_62 : STD_LOGIC_VECTOR (6 downto 0) := "1100010";
    constant ap_const_lv14_2584 : STD_LOGIC_VECTOR (13 downto 0) := "10010110000100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv14_62 : STD_LOGIC_VECTOR (13 downto 0) := "00000001100010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv14_64 : STD_LOGIC_VECTOR (13 downto 0) := "00000001100100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_228 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_reg_239 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_250 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten6_reg_261 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_reg_272 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_reg_283 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten1_reg_294 : STD_LOGIC_VECTOR (16 downto 0);
    signal indvar_flatten2_reg_305 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten3_reg_316 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_1_reg_327 : STD_LOGIC_VECTOR (6 downto 0);
    signal m_1_reg_338 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_1_reg_349 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_360 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_reg_371 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond_flatten_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1162 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_1162_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_388_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal j_mid2_fu_406_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_mid2_reg_1171 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_mid2_v_v_fu_414_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_mid2_v_v_reg_1176 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_2_fu_422_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1134_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_reg_1193 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_fu_445_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_1198 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_flatten8_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten8_reg_1203 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next7_fu_476_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_7_mid2_v_fu_532_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_mid2_v_reg_1212 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_11_cast_fu_540_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_cast_reg_1219 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_2_fu_564_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_flatten3_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten3_reg_1234 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state9_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state12_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state13_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal exitcond_flatten3_reg_1234_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten3_reg_1234_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten3_reg_1234_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next3_fu_606_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal exitcond_flatten1_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_1243 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_1243_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten15_m_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten15_m_reg_1252 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten15_m_reg_1252_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_reg_1260 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_mid1_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_mid1_reg_1266 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_mid2_fu_684_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_mid2_reg_1273 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_mid2_reg_1273_pp2_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal j_3_fu_692_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_next1_fu_704_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvar_flatten_next2_fu_718_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_760_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_reg_1294 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_18_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_1299 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_3_fu_794_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_3_reg_1304 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_cast_mid2_fu_807_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_cast_mid2_reg_1311 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal n_3_fu_829_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_3_reg_1319 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_17_cast_mid2_fu_842_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_17_cast_mid2_reg_1325 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_20_mid2_fu_879_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_mid2_reg_1331 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_mid2_fu_899_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_27_fu_909_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_reg_1341 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_reg_1341_pp2_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_18_mid2_fu_1010_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_mid2_reg_1351 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_mid2_reg_1351_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_reg_1361 : STD_LOGIC_VECTOR (7 downto 0);
    signal OBRAM_addr_1_reg_1367 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_21_fu_1073_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_21_reg_1373 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal exitcond_fu_1076_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_1378 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state15_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state17_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal exitcond_reg_1378_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_1082_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal tmp_13_fu_1088_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_1387 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_1387_pp3_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_1_fu_1113_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal x_assign_1_reg_1397 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_condition_pp2_exit_iter1_state10 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state15 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal IBRAM_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal IBRAM_ce0 : STD_LOGIC;
    signal IBRAM_we0 : STD_LOGIC;
    signal IBRAM_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal OBRAM_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal OBRAM_ce0 : STD_LOGIC;
    signal OBRAM_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal OBRAM_ce1 : STD_LOGIC;
    signal OBRAM_we1 : STD_LOGIC;
    signal OBRAM_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal WBRAM_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal WBRAM_ce0 : STD_LOGIC;
    signal WBRAM_we0 : STD_LOGIC;
    signal WBRAM_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_i_phi_fu_243_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_m_phi_fu_276_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_m_1_phi_fu_342_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_n_1_phi_fu_353_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_cast_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_fu_559_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_cast_fu_595_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_cast_mid2_v_fu_992_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_cast_fu_1029_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_1057_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal exitcond1_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_394_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1125_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl_fu_452_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_460_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_cast7_fu_448_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_2_fu_482_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl_mid1_fu_506_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_mid1_fu_514_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_cast7_mid1_fu_502_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_mid1_fu_518_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_fu_464_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_mid2_fu_494_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_mid2_fu_524_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_544_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_cast_fu_550_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum_fu_554_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_573_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_cast_fu_580_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_mid2_cast_fu_570_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_584_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_590_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten15_n_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_mid_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_1_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten13_op_fu_698_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvar_flatten34_op_fu_712_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_734_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl2_cast_fu_742_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_cast1_fu_730_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_fu_746_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_32_cast_fu_752_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_cast_fu_756_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_fu_766_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_cast_fu_726_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_fu_788_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_mid1_cast1_fu_818_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_19_fu_782_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal n_1_mid_fu_800_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_cast_mid2_cast_fu_814_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_mid_fu_822_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_fu_788_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_1_mid_fu_835_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_fu_863_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_19_mid1_fu_873_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_mid4_fu_849_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_21_mid1_fu_886_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_21_mid1_fu_886_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_21_mid_fu_856_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_26_cast2_fu_906_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_21_mid2_fu_892_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_24_fu_918_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl3_cast_fu_925_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_mid1_cast_fu_915_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_fu_929_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_30_fu_942_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl4_fu_949_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_mid2_cast_fu_939_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_cast_fu_935_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_19_cast_mid255_v_fu_959_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_18_mid_fu_969_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_953_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_mid1_fu_983_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_fu_986_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_cast_mid255_v_1_fu_965_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_mid1_fu_1000_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_18_mid1_fu_1004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_mid3_fu_974_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_cast_mid2_cas_fu_980_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_fu_1020_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1142_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_25_fu_1041_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_1041_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_1041_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_fu_1061_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_fu_1093_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal x_assign_fu_1097_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_1107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_cast_fu_1102_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1125_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1125_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1125_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_cast_fu_434_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1134_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1134_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1134_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1142_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1142_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1142_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal grp_fu_1125_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1134_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1142_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1142_p20 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_20_fu_788_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_21_mid1_fu_886_p00 : STD_LOGIC_VECTOR (13 downto 0);

    component CNN_mac_muladd_7nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component CONV_IBRAM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component CONV_OBRAM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component CONV_WBRAM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    IBRAM_U : component CONV_IBRAM
    generic map (
        DataWidth => 8,
        AddressRange => 10000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => IBRAM_address0,
        ce0 => IBRAM_ce0,
        we0 => IBRAM_we0,
        d0 => input_img_q0,
        q0 => IBRAM_q0);

    OBRAM_U : component CONV_OBRAM
    generic map (
        DataWidth => 8,
        AddressRange => 9604,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => OBRAM_address0,
        ce0 => OBRAM_ce0,
        q0 => OBRAM_q0,
        address1 => OBRAM_addr_1_reg_1367,
        ce1 => OBRAM_ce1,
        we1 => OBRAM_we1,
        d1 => OBRAM_d1);

    WBRAM_U : component CONV_WBRAM
    generic map (
        DataWidth => 8,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => WBRAM_address0,
        ce0 => WBRAM_ce0,
        we0 => WBRAM_we0,
        d0 => kernel_q0,
        q0 => WBRAM_q0);

    CNN_mac_muladd_7nbkb_U1 : component CNN_mac_muladd_7nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_1125_p0,
        din1 => grp_fu_1125_p1,
        din2 => grp_fu_1125_p2,
        dout => grp_fu_1125_p3);

    CNN_mac_muladd_7nbkb_U2 : component CNN_mac_muladd_7nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_1134_p0,
        din1 => grp_fu_1134_p1,
        din2 => grp_fu_1134_p2,
        dout => grp_fu_1134_p3);

    CNN_mac_muladd_7nbkb_U3 : component CNN_mac_muladd_7nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_1142_p0,
        din1 => grp_fu_1142_p1,
        din2 => grp_fu_1142_p2,
        dout => grp_fu_1142_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state6);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond_flatten3_fu_600_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter1_state10)) then 
                        ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state15) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state15)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state15);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_1_reg_360 <= ap_const_lv7_0;
            elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten3_reg_1234 = ap_const_lv1_0))) then 
                i_1_reg_360 <= i_1_mid2_fu_899_p3;
            end if; 
        end if;
    end process;

    i_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_reg_239 <= tmp_3_mid2_v_v_reg_1176;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_239 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten1_reg_294 <= ap_const_lv17_0;
            elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten3_fu_600_p2 = ap_const_lv1_0))) then 
                indvar_flatten1_reg_294 <= indvar_flatten_next3_fu_606_p2;
            end if; 
        end if;
    end process;

    indvar_flatten2_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten2_reg_305 <= ap_const_lv16_0;
            elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten3_fu_600_p2 = ap_const_lv1_0))) then 
                indvar_flatten2_reg_305 <= indvar_flatten_next2_fu_718_p3;
            end if; 
        end if;
    end process;

    indvar_flatten3_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten3_reg_316 <= ap_const_lv14_0;
            elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten3_fu_600_p2 = ap_const_lv1_0))) then 
                indvar_flatten3_reg_316 <= indvar_flatten_next1_fu_704_p3;
            end if; 
        end if;
    end process;

    indvar_flatten6_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten8_fu_470_p2 = ap_const_lv1_0))) then 
                indvar_flatten6_reg_261 <= indvar_flatten_next7_fu_476_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvar_flatten6_reg_261 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_382_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_228 <= indvar_flatten_next_fu_388_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_228 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    j_1_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_1_reg_327 <= ap_const_lv7_0;
            elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten3_fu_600_p2 = ap_const_lv1_0))) then 
                j_1_reg_327 <= j_3_fu_692_p2;
            end if; 
        end if;
    end process;

    j_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_382_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                j_reg_250 <= j_2_fu_422_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_250 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    k_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                k_reg_371 <= ap_const_lv14_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond_fu_1076_p2 = ap_const_lv1_0))) then 
                k_reg_371 <= k_1_fu_1082_p2;
            end if; 
        end if;
    end process;

    m_1_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                m_1_reg_338 <= ap_const_lv2_0;
            elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten3_reg_1234_pp2_iter1_reg = ap_const_lv1_0))) then 
                m_1_reg_338 <= tmp_8_cast_mid2_reg_1311;
            end if; 
        end if;
    end process;

    m_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten8_reg_1203 = ap_const_lv1_0))) then 
                m_reg_272 <= tmp_7_mid2_v_reg_1212;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                m_reg_272 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_1_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                n_1_reg_349 <= ap_const_lv2_0;
            elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten3_reg_1234_pp2_iter1_reg = ap_const_lv1_0))) then 
                n_1_reg_349 <= tmp_17_cast_mid2_reg_1325;
            end if; 
        end if;
    end process;

    n_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten8_fu_470_p2 = ap_const_lv1_0))) then 
                n_reg_283 <= n_2_fu_564_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                n_reg_283 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten3_reg_1234_pp2_iter2_reg = ap_const_lv1_0))) then
                OBRAM_addr_1_reg_1367 <= tmp_28_fu_1057_p1(14 - 1 downto 0);
                temp_reg_1361 <= tmp_25_fu_1041_p2(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten3_fu_600_p2 = ap_const_lv1_0))) then
                exitcond1_mid1_reg_1266 <= exitcond1_mid1_fu_666_p2;
                exitcond_flatten15_m_reg_1252 <= exitcond_flatten15_m_fu_642_p2;
                exitcond_flatten1_reg_1243 <= exitcond_flatten1_fu_612_p2;
                j_1_mid2_reg_1273 <= j_1_mid2_fu_684_p3;
                tmp_32_reg_1260 <= tmp_32_fu_648_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                exitcond_flatten15_m_reg_1252_pp2_iter1_reg <= exitcond_flatten15_m_reg_1252;
                exitcond_flatten1_reg_1243_pp2_iter1_reg <= exitcond_flatten1_reg_1243;
                exitcond_flatten3_reg_1234 <= exitcond_flatten3_fu_600_p2;
                exitcond_flatten3_reg_1234_pp2_iter1_reg <= exitcond_flatten3_reg_1234;
                j_1_mid2_reg_1273_pp2_iter1_reg <= j_1_mid2_reg_1273;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                exitcond_flatten3_reg_1234_pp2_iter2_reg <= exitcond_flatten3_reg_1234_pp2_iter1_reg;
                exitcond_flatten3_reg_1234_pp2_iter3_reg <= exitcond_flatten3_reg_1234_pp2_iter2_reg;
                tmp_18_mid2_reg_1351_pp2_iter3_reg <= tmp_18_mid2_reg_1351;
                tmp_27_reg_1341_pp2_iter2_reg <= tmp_27_reg_1341;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                exitcond_flatten8_reg_1203 <= exitcond_flatten8_fu_470_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten_reg_1162 <= exitcond_flatten_fu_382_p2;
                exitcond_flatten_reg_1162_pp0_iter1_reg <= exitcond_flatten_reg_1162;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                exitcond_reg_1378 <= exitcond_fu_1076_p2;
                exitcond_reg_1378_pp3_iter1_reg <= exitcond_reg_1378;
                    tmp_13_reg_1387_pp3_iter1_reg(13 downto 0) <= tmp_13_reg_1387(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_382_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                j_mid2_reg_1171 <= j_mid2_fu_406_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten3_reg_1234 = ap_const_lv1_0))) then
                m_3_reg_1304 <= m_3_fu_794_p2;
                n_3_reg_1319 <= n_3_fu_829_p2;
                tmp_20_mid2_reg_1331 <= tmp_20_mid2_fu_879_p3;
                tmp_27_reg_1341 <= tmp_27_fu_909_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten8_fu_470_p2 = ap_const_lv1_0))) then
                    tmp_11_cast_reg_1219(1 downto 0) <= tmp_11_cast_fu_540_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond_fu_1076_p2 = ap_const_lv1_0))) then
                    tmp_13_reg_1387(13 downto 0) <= tmp_13_fu_1088_p1(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten15_m_reg_1252 = ap_const_lv1_0) and (exitcond_flatten1_reg_1243 = ap_const_lv1_0))) then
                tmp_16_reg_1294 <= tmp_16_fu_760_p2;
                tmp_18_reg_1299 <= tmp_18_fu_772_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten3_reg_1234 = ap_const_lv1_0))) then
                tmp_17_cast_mid2_reg_1325 <= tmp_17_cast_mid2_fu_842_p3;
                tmp_8_cast_mid2_reg_1311 <= tmp_8_cast_mid2_fu_807_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten3_reg_1234_pp2_iter1_reg = ap_const_lv1_0))) then
                tmp_18_mid2_reg_1351 <= tmp_18_mid2_fu_1010_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_21_reg_1373 <= tmp_21_fu_1073_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_382_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                tmp_3_mid2_v_v_reg_1176 <= tmp_3_mid2_v_v_fu_414_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                tmp_4_reg_1193 <= grp_fu_1134_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten8_fu_470_p2 = ap_const_lv1_0))) then
                tmp_7_mid2_v_reg_1212 <= tmp_7_mid2_v_fu_532_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_reg_1198 <= tmp_fu_445_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond_reg_1378 = ap_const_lv1_0))) then
                x_assign_1_reg_1397 <= x_assign_1_fu_1113_p3;
            end if;
        end if;
    end process;
    tmp_11_cast_reg_1219(4 downto 2) <= "000";
    tmp_13_reg_1387(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    tmp_13_reg_1387_pp3_iter1_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten_fu_382_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, exitcond_flatten8_fu_470_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, exitcond_fu_1076_p2, ap_enable_reg_pp3_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten_fu_382_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((exitcond_flatten_fu_382_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten8_fu_470_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten8_fu_470_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) and not(((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (exitcond_fu_1076_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (exitcond_fu_1076_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    IBRAM_address0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter2, ap_block_pp0_stage0, ap_block_pp2_stage0, tmp_4_cast_fu_441_p1, tmp_43_cast_fu_1029_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            IBRAM_address0 <= tmp_43_cast_fu_1029_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IBRAM_address0 <= tmp_4_cast_fu_441_p1(14 - 1 downto 0);
        else 
            IBRAM_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    IBRAM_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            IBRAM_ce0 <= ap_const_logic_1;
        else 
            IBRAM_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    IBRAM_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond_flatten_reg_1162_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond_flatten_reg_1162_pp0_iter1_reg = ap_const_lv1_0))) then 
            IBRAM_we0 <= ap_const_logic_1;
        else 
            IBRAM_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OBRAM_address0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, tmp_13_fu_1088_p1, ap_enable_reg_pp2_iter3, ap_block_pp2_stage0, tmp_28_fu_1057_p1, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            OBRAM_address0 <= tmp_13_fu_1088_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            OBRAM_address0 <= tmp_28_fu_1057_p1(14 - 1 downto 0);
        else 
            OBRAM_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    OBRAM_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_enable_reg_pp2_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            OBRAM_ce0 <= ap_const_logic_1;
        else 
            OBRAM_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OBRAM_ce1_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            OBRAM_ce1 <= ap_const_logic_1;
        else 
            OBRAM_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OBRAM_d1 <= 
        temp_reg_1361 when (tmp_18_mid2_reg_1351_pp2_iter3_reg(0) = '1') else 
        tmp_29_fu_1061_p2;

    OBRAM_we1_assign_proc : process(ap_block_pp2_stage0_11001, exitcond_flatten3_reg_1234_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten3_reg_1234_pp2_iter3_reg = ap_const_lv1_0))) then 
            OBRAM_we1 <= ap_const_logic_1;
        else 
            OBRAM_we1 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter2, ap_block_pp1_stage0, ap_block_pp2_stage0, tmp_30_cast_fu_595_p1, tmp_19_cast_mid2_v_fu_992_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            WBRAM_address0 <= tmp_19_cast_mid2_v_fu_992_p3(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            WBRAM_address0 <= tmp_30_cast_fu_595_p1(4 - 1 downto 0);
        else 
            WBRAM_address0 <= "XXXX";
        end if; 
    end process;


    WBRAM_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter2)
    begin
        if ((((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            WBRAM_ce0 <= ap_const_logic_1;
        else 
            WBRAM_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_we0_assign_proc : process(exitcond_flatten8_reg_1203, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten8_reg_1203 = ap_const_lv1_0))) then 
            WBRAM_we0 <= ap_const_logic_1;
        else 
            WBRAM_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(6);
    ap_CS_fsm_state18 <= ap_CS_fsm(8);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
    ap_CS_fsm_state8 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_382_p2)
    begin
        if ((exitcond_flatten_fu_382_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state6_assign_proc : process(exitcond_flatten8_fu_470_p2)
    begin
        if ((exitcond_flatten8_fu_470_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter1_state10_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_condition_pp2_exit_iter1_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter1_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state15_assign_proc : process(exitcond_fu_1076_p2)
    begin
        if ((exitcond_fu_1076_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state15 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_243_p4_assign_proc : process(i_reg_239, exitcond_flatten_reg_1162, ap_CS_fsm_pp0_stage0, tmp_3_mid2_v_v_reg_1176, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_1162 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_phi_fu_243_p4 <= tmp_3_mid2_v_v_reg_1176;
        else 
            ap_phi_mux_i_phi_fu_243_p4 <= i_reg_239;
        end if; 
    end process;


    ap_phi_mux_m_1_phi_fu_342_p4_assign_proc : process(m_1_reg_338, exitcond_flatten3_reg_1234_pp2_iter1_reg, tmp_8_cast_mid2_reg_1311, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (exitcond_flatten3_reg_1234_pp2_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_m_1_phi_fu_342_p4 <= tmp_8_cast_mid2_reg_1311;
        else 
            ap_phi_mux_m_1_phi_fu_342_p4 <= m_1_reg_338;
        end if; 
    end process;


    ap_phi_mux_m_phi_fu_276_p4_assign_proc : process(m_reg_272, exitcond_flatten8_reg_1203, ap_CS_fsm_pp1_stage0, tmp_7_mid2_v_reg_1212, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten8_reg_1203 = ap_const_lv1_0))) then 
            ap_phi_mux_m_phi_fu_276_p4 <= tmp_7_mid2_v_reg_1212;
        else 
            ap_phi_mux_m_phi_fu_276_p4 <= m_reg_272;
        end if; 
    end process;


    ap_phi_mux_n_1_phi_fu_353_p4_assign_proc : process(n_1_reg_349, exitcond_flatten3_reg_1234_pp2_iter1_reg, tmp_17_cast_mid2_reg_1325, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (exitcond_flatten3_reg_1234_pp2_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_n_1_phi_fu_353_p4 <= tmp_17_cast_mid2_reg_1325;
        else 
            ap_phi_mux_n_1_phi_fu_353_p4 <= n_1_reg_349;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_400_p2 <= "1" when (j_reg_250 = ap_const_lv7_64) else "0";
    exitcond1_mid1_fu_666_p2 <= (not_exitcond_flatten_1_fu_660_p2 and exitcond1_mid_fu_630_p2);
    exitcond1_mid_fu_630_p2 <= (not_exitcond_flatten_fu_618_p2 and exitcond3_fu_624_p2);
    exitcond2_fu_488_p2 <= "1" when (n_reg_283 = ap_const_lv2_3) else "0";
    exitcond3_fu_624_p2 <= "1" when (j_1_reg_327 = ap_const_lv7_62) else "0";
    exitcond_flatten15_m_fu_642_p2 <= (not_exitcond_flatten_fu_618_p2 and exitcond_flatten2_fu_636_p2);
    exitcond_flatten15_n_fu_654_p2 <= (exitcond_flatten2_fu_636_p2 xor ap_const_lv1_1);
    exitcond_flatten1_fu_612_p2 <= "1" when (indvar_flatten2_reg_305 = ap_const_lv16_708C) else "0";
    exitcond_flatten2_fu_636_p2 <= "1" when (indvar_flatten3_reg_316 = ap_const_lv14_2584) else "0";
    exitcond_flatten3_fu_600_p2 <= "1" when (indvar_flatten1_reg_294 = ap_const_lv17_151A4) else "0";
    exitcond_flatten8_fu_470_p2 <= "1" when (indvar_flatten6_reg_261 = ap_const_lv4_9) else "0";
    exitcond_flatten_fu_382_p2 <= "1" when (indvar_flatten_reg_228 = ap_const_lv14_2710) else "0";
    exitcond_fu_1076_p2 <= "1" when (k_reg_371 = ap_const_lv14_2584) else "0";
    grp_fu_1125_p0 <= grp_fu_1125_p00(7 - 1 downto 0);
    grp_fu_1125_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_mid2_v_v_reg_1176),14));
    grp_fu_1125_p1 <= ap_const_lv14_64(8 - 1 downto 0);
    grp_fu_1125_p2 <= tmp_9_cast_fu_434_p1(7 - 1 downto 0);
    grp_fu_1134_p0 <= grp_fu_1134_p00(7 - 1 downto 0);
    grp_fu_1134_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_mid2_v_v_reg_1176),14));
    grp_fu_1134_p1 <= ap_const_lv14_64(8 - 1 downto 0);
    grp_fu_1134_p2 <= tmp_9_cast_fu_434_p1(7 - 1 downto 0);
    grp_fu_1142_p0 <= grp_fu_1142_p00(7 - 1 downto 0);
    grp_fu_1142_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_mid2_reg_1331),14));
    grp_fu_1142_p1 <= ap_const_lv14_64(8 - 1 downto 0);
    grp_fu_1142_p2 <= grp_fu_1142_p20(7 - 1 downto 0);
    grp_fu_1142_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_1020_p2),14));
    i_1_mid2_fu_899_p3 <= 
        i_3_fu_863_p2 when (exitcond1_mid1_reg_1266(0) = '1') else 
        i_1_mid_fu_835_p3;
    i_1_mid_fu_835_p3 <= 
        ap_const_lv7_0 when (tmp_32_reg_1260(0) = '1') else 
        i_1_reg_360;
    i_2_fu_394_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_243_p4) + unsigned(ap_const_lv7_1));
    i_3_fu_863_p2 <= std_logic_vector(unsigned(i_1_mid_fu_835_p3) + unsigned(ap_const_lv7_1));
    indvar_flatten13_op_fu_698_p2 <= std_logic_vector(unsigned(indvar_flatten3_reg_316) + unsigned(ap_const_lv14_1));
    indvar_flatten34_op_fu_712_p2 <= std_logic_vector(unsigned(indvar_flatten2_reg_305) + unsigned(ap_const_lv16_1));
    indvar_flatten_next1_fu_704_p3 <= 
        ap_const_lv14_1 when (tmp_32_fu_648_p2(0) = '1') else 
        indvar_flatten13_op_fu_698_p2;
    indvar_flatten_next2_fu_718_p3 <= 
        ap_const_lv16_1 when (exitcond_flatten1_fu_612_p2(0) = '1') else 
        indvar_flatten34_op_fu_712_p2;
    indvar_flatten_next3_fu_606_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_294) + unsigned(ap_const_lv17_1));
    indvar_flatten_next7_fu_476_p2 <= std_logic_vector(unsigned(indvar_flatten6_reg_261) + unsigned(ap_const_lv4_1));
    indvar_flatten_next_fu_388_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_228) + unsigned(ap_const_lv14_1));
    input_img_address0 <= tmp_1_fu_437_p1(14 - 1 downto 0);

    input_img_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            input_img_ce0 <= ap_const_logic_1;
        else 
            input_img_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_mid2_fu_684_p3 <= 
        ap_const_lv7_0 when (tmp_35_fu_678_p2(0) = '1') else 
        j_1_reg_327;
    j_2_fu_422_p2 <= std_logic_vector(unsigned(j_mid2_fu_406_p3) + unsigned(ap_const_lv7_1));
    j_3_fu_692_p2 <= std_logic_vector(unsigned(j_1_mid2_fu_684_p3) + unsigned(ap_const_lv7_1));
    j_mid2_fu_406_p3 <= 
        ap_const_lv7_0 when (exitcond1_fu_400_p2(0) = '1') else 
        j_reg_250;
    k_1_fu_1082_p2 <= std_logic_vector(unsigned(k_reg_371) + unsigned(ap_const_lv14_1));
    kernel_address0 <= sum_cast_fu_559_p1(5 - 1 downto 0);

    kernel_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_2_fu_482_p2 <= std_logic_vector(unsigned(ap_phi_mux_m_phi_fu_276_p4) + unsigned(ap_const_lv2_1));
    m_3_fu_794_p2 <= std_logic_vector(unsigned(ap_phi_mux_m_1_phi_fu_342_p4) + unsigned(ap_const_lv2_1));
    n_1_mid_fu_800_p3 <= 
        ap_const_lv2_0 when (exitcond_flatten1_reg_1243(0) = '1') else 
        ap_phi_mux_n_1_phi_fu_353_p4;
    n_2_fu_564_p2 <= std_logic_vector(unsigned(n_mid2_fu_494_p3) + unsigned(ap_const_lv2_1));
    n_3_fu_829_p2 <= std_logic_vector(unsigned(n_1_mid_fu_800_p3) + unsigned(ap_const_lv2_1));
    n_mid2_fu_494_p3 <= 
        ap_const_lv2_0 when (exitcond2_fu_488_p2(0) = '1') else 
        n_reg_283;
    not_exitcond_flatten_1_fu_660_p2 <= (exitcond_flatten1_fu_612_p2 or exitcond_flatten15_n_fu_654_p2);
    not_exitcond_flatten_fu_618_p2 <= (exitcond_flatten1_fu_612_p2 xor ap_const_lv1_1);
    output_img_address0 <= tmp_13_reg_1387_pp3_iter1_reg(14 - 1 downto 0);

    output_img_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            output_img_ce0 <= ap_const_logic_1;
        else 
            output_img_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_img_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_assign_1_reg_1397),8));

    output_img_we0_assign_proc : process(ap_block_pp3_stage0_11001, exitcond_reg_1378_pp3_iter1_reg, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (exitcond_reg_1378_pp3_iter1_reg = ap_const_lv1_0))) then 
            output_img_we0 <= ap_const_logic_1;
        else 
            output_img_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_573_p3),5));
    p_shl2_cast_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_734_p3),5));
    p_shl3_cast_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_918_p3),5));
    p_shl4_fu_949_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_942_p3),64));
    p_shl_cast_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_452_p3),5));
    p_shl_cast_mid1_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_mid1_fu_506_p3),5));
    p_shl_fu_452_p3 <= (ap_phi_mux_m_phi_fu_276_p4 & ap_const_lv2_0);
    p_shl_mid1_fu_506_p3 <= (m_2_fu_482_p2 & ap_const_lv2_0);
    sum_cast_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_554_p2),64));
    sum_fu_554_p2 <= std_logic_vector(unsigned(tmp_reg_1198) + unsigned(tmp_13_cast_fu_550_p1));
    tmp_10_fu_590_p2 <= std_logic_vector(unsigned(tmp_2_fu_584_p2) + unsigned(tmp_11_cast_reg_1219));
    tmp_11_cast_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_mid2_fu_494_p3),5));
    tmp_11_fu_734_p3 <= (ap_phi_mux_m_1_phi_fu_342_p4 & ap_const_lv2_0);
        tmp_13_cast_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_544_p2),6));

    tmp_13_fu_1088_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_371),64));
    tmp_14_fu_746_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_742_p1) - unsigned(tmp_8_cast1_fu_730_p1));
    tmp_15_fu_1107_p2 <= "1" when (signed(x_assign_fu_1097_p2) > signed(ap_const_lv8_0)) else "0";
    tmp_16_cast_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_n_1_phi_fu_353_p4),6));
    tmp_16_fu_760_p2 <= std_logic_vector(signed(tmp_32_cast_fu_752_p1) + signed(tmp_16_cast_fu_756_p1));
    tmp_16_mid1_fu_983_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_3_reg_1319),64));
    tmp_17_cast_mid2_cas_fu_980_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_cast_mid2_reg_1325),7));
    tmp_17_cast_mid2_fu_842_p3 <= 
        n_3_fu_829_p2 when (exitcond_flatten15_m_reg_1252(0) = '1') else 
        n_1_mid_fu_800_p3;
    tmp_17_fu_766_p2 <= (ap_phi_mux_n_1_phi_fu_353_p4 or ap_phi_mux_m_1_phi_fu_342_p4);
    tmp_17_mid1_fu_1000_p2 <= (tmp_8_cast_mid2_reg_1311 or n_3_reg_1319);
    tmp_18_fu_772_p2 <= "1" when (tmp_17_fu_766_p2 = ap_const_lv2_0) else "0";
    tmp_18_mid1_fu_1004_p2 <= "1" when (tmp_17_mid1_fu_1000_p2 = ap_const_lv2_0) else "0";
    tmp_18_mid2_fu_1010_p3 <= 
        tmp_18_mid1_fu_1004_p2 when (exitcond_flatten15_m_reg_1252_pp2_iter1_reg(0) = '1') else 
        tmp_18_mid3_fu_974_p3;
    tmp_18_mid3_fu_974_p3 <= 
        tmp_18_mid_fu_969_p2 when (exitcond_flatten1_reg_1243_pp2_iter1_reg(0) = '1') else 
        tmp_18_reg_1299;
    tmp_18_mid_fu_969_p2 <= "1" when (m_3_reg_1304 = ap_const_lv2_0) else "0";
        tmp_19_cast_mid255_v_1_fu_965_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_cast_mid255_v_fu_959_p3),64));

    tmp_19_cast_mid255_v_fu_959_p3 <= 
        tmp_35_cast_fu_935_p1 when (exitcond_flatten1_reg_1243_pp2_iter1_reg(0) = '1') else 
        tmp_16_reg_1294;
    tmp_19_cast_mid2_v_fu_992_p3 <= 
        tmp_33_fu_986_p2 when (exitcond_flatten15_m_reg_1252_pp2_iter1_reg(0) = '1') else 
        tmp_19_cast_mid255_v_1_fu_965_p1;
    tmp_19_fu_782_p2 <= std_logic_vector(unsigned(i_1_reg_360) + unsigned(tmp_8_cast_fu_726_p1));
    tmp_19_mid1_fu_873_p2 <= std_logic_vector(unsigned(i_3_fu_863_p2) + unsigned(tmp_8_cast_mid2_cast_fu_814_p1));
    tmp_1_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1125_p3),64));
    tmp_20_fu_788_p0 <= tmp_20_fu_788_p00(7 - 1 downto 0);
    tmp_20_fu_788_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_360),14));
    tmp_20_fu_788_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_788_p0) * unsigned(ap_const_lv14_62), 14));
    tmp_20_mid2_fu_879_p3 <= 
        tmp_19_mid1_fu_873_p2 when (exitcond1_mid1_reg_1266(0) = '1') else 
        tmp_20_mid4_fu_849_p3;
    tmp_20_mid4_fu_849_p3 <= 
        tmp_8_cast_mid2_cast_fu_814_p1 when (exitcond_flatten15_m_reg_1252(0) = '1') else 
        tmp_20_mid_fu_822_p3;
    tmp_20_mid_fu_822_p3 <= 
        tmp_8_mid1_cast1_fu_818_p1 when (exitcond_flatten1_reg_1243(0) = '1') else 
        tmp_19_fu_782_p2;
    tmp_21_fu_1073_p1 <= bias(7 - 1 downto 0);
    tmp_21_mid1_fu_886_p0 <= tmp_21_mid1_fu_886_p00(7 - 1 downto 0);
    tmp_21_mid1_fu_886_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_fu_863_p2),14));
    tmp_21_mid1_fu_886_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_mid1_fu_886_p0) * unsigned(ap_const_lv14_62), 14));
    tmp_21_mid2_fu_892_p3 <= 
        tmp_21_mid1_fu_886_p2 when (exitcond1_mid1_reg_1266(0) = '1') else 
        tmp_21_mid_fu_856_p3;
    tmp_21_mid_fu_856_p3 <= 
        ap_const_lv14_0 when (tmp_32_reg_1260(0) = '1') else 
        tmp_20_fu_788_p2;
    tmp_23_fu_1020_p2 <= std_logic_vector(unsigned(j_1_mid2_reg_1273_pp2_iter1_reg) + unsigned(tmp_17_cast_mid2_cas_fu_980_p1));
    tmp_24_fu_918_p3 <= (m_3_reg_1304 & ap_const_lv2_0);
    tmp_25_fu_1041_p0 <= IBRAM_q0;
    tmp_25_fu_1041_p1 <= WBRAM_q0;
    tmp_25_fu_1041_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_25_fu_1041_p0) * signed(tmp_25_fu_1041_p1))), 16));
    tmp_26_cast2_fu_906_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_mid2_reg_1273),14));
    tmp_26_fu_929_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_925_p1) - unsigned(tmp_8_mid1_cast_fu_915_p1));
    tmp_27_fu_909_p2 <= std_logic_vector(unsigned(tmp_26_cast2_fu_906_p1) + unsigned(tmp_21_mid2_fu_892_p3));
    tmp_28_fu_1057_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_reg_1341_pp2_iter2_reg),64));
    tmp_29_fu_1061_p2 <= std_logic_vector(unsigned(temp_reg_1361) + unsigned(OBRAM_q0));
    tmp_2_fu_584_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_580_p1) - unsigned(tmp_7_mid2_cast_fu_570_p1));
        tmp_30_cast_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_590_p2),64));

    tmp_30_fu_942_p3 <= (tmp_8_cast_mid2_reg_1311 & ap_const_lv2_0);
    tmp_31_fu_953_p2 <= std_logic_vector(unsigned(p_shl4_fu_949_p1) - unsigned(tmp_8_mid2_cast_fu_939_p1));
        tmp_32_cast_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_fu_746_p2),6));

    tmp_32_fu_648_p2 <= (exitcond_flatten1_fu_612_p2 or exitcond_flatten15_m_fu_642_p2);
    tmp_33_fu_986_p2 <= std_logic_vector(unsigned(tmp_31_fu_953_p2) + unsigned(tmp_16_mid1_fu_983_p1));
    tmp_34_fu_672_p2 <= (exitcond_flatten15_m_fu_642_p2 or exitcond1_mid1_fu_666_p2);
        tmp_35_cast_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_26_fu_929_p2),6));

    tmp_35_fu_678_p2 <= (tmp_34_fu_672_p2 or exitcond_flatten1_fu_612_p2);
    tmp_38_fu_1093_p1 <= OBRAM_q0(7 - 1 downto 0);
    tmp_3_mid2_v_v_fu_414_p3 <= 
        i_2_fu_394_p2 when (exitcond1_fu_400_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_243_p4;
    tmp_43_cast_fu_1029_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1142_p3),64));
    tmp_4_cast_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_1193),64));
    tmp_5_cast7_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_m_phi_fu_276_p4),5));
    tmp_5_cast7_mid1_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_2_fu_482_p2),5));
    tmp_6_fu_464_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_460_p1) - unsigned(tmp_5_cast7_fu_448_p1));
    tmp_6_mid1_fu_518_p2 <= std_logic_vector(unsigned(p_shl_cast_mid1_fu_514_p1) - unsigned(tmp_5_cast7_mid1_fu_502_p1));
    tmp_6_mid2_fu_524_p3 <= 
        tmp_6_mid1_fu_518_p2 when (exitcond2_fu_488_p2(0) = '1') else 
        tmp_6_fu_464_p2;
    tmp_7_fu_573_p3 <= (tmp_7_mid2_v_reg_1212 & ap_const_lv2_0);
    tmp_7_mid2_cast_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_mid2_v_reg_1212),5));
    tmp_7_mid2_v_fu_532_p3 <= 
        m_2_fu_482_p2 when (exitcond2_fu_488_p2(0) = '1') else 
        ap_phi_mux_m_phi_fu_276_p4;
    tmp_8_cast1_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_m_1_phi_fu_342_p4),5));
    tmp_8_cast_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_m_1_phi_fu_342_p4),7));
    tmp_8_cast_mid2_cast_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_cast_mid2_fu_807_p3),7));
    tmp_8_cast_mid2_fu_807_p3 <= 
        m_3_fu_794_p2 when (exitcond_flatten1_reg_1243(0) = '1') else 
        ap_phi_mux_m_1_phi_fu_342_p4;
    tmp_8_fu_544_p2 <= std_logic_vector(unsigned(tmp_11_cast_fu_540_p1) + unsigned(tmp_6_mid2_fu_524_p3));
    tmp_8_mid1_cast1_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_3_fu_794_p2),7));
    tmp_8_mid1_cast_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_3_reg_1304),5));
    tmp_8_mid2_cast_fu_939_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_cast_mid2_reg_1311),64));
    tmp_9_cast_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_1171),14));
    tmp_fu_445_p1 <= kernel_offset(6 - 1 downto 0);
    x_assign_1_fu_1113_p3 <= 
        x_assign_cast_fu_1102_p2 when (tmp_15_fu_1107_p2(0) = '1') else 
        ap_const_lv7_0;
    x_assign_cast_fu_1102_p2 <= std_logic_vector(unsigned(tmp_38_fu_1093_p1) + unsigned(tmp_21_reg_1373));
    x_assign_fu_1097_p2 <= std_logic_vector(unsigned(bias) + unsigned(OBRAM_q0));
end behav;
