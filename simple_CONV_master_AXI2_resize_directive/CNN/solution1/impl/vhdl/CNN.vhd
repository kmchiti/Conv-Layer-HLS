-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN is
generic (
    C_M_AXI_IMG_PORT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IMG_PORT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IMG_PORT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMG_PORT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMG_PORT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMG_PORT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMG_PORT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMG_PORT_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMG_PORT_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_IMG_PORT_USER_VALUE : INTEGER := 0;
    C_M_AXI_IMG_PORT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IMG_PORT_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_img_port_AWVALID : OUT STD_LOGIC;
    m_axi_img_port_AWREADY : IN STD_LOGIC;
    m_axi_img_port_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_PORT_ADDR_WIDTH-1 downto 0);
    m_axi_img_port_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_PORT_ID_WIDTH-1 downto 0);
    m_axi_img_port_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_img_port_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_img_port_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_img_port_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_img_port_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_img_port_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_img_port_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_img_port_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_img_port_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_PORT_AWUSER_WIDTH-1 downto 0);
    m_axi_img_port_WVALID : OUT STD_LOGIC;
    m_axi_img_port_WREADY : IN STD_LOGIC;
    m_axi_img_port_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_PORT_DATA_WIDTH-1 downto 0);
    m_axi_img_port_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_PORT_DATA_WIDTH/8-1 downto 0);
    m_axi_img_port_WLAST : OUT STD_LOGIC;
    m_axi_img_port_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_PORT_ID_WIDTH-1 downto 0);
    m_axi_img_port_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_PORT_WUSER_WIDTH-1 downto 0);
    m_axi_img_port_ARVALID : OUT STD_LOGIC;
    m_axi_img_port_ARREADY : IN STD_LOGIC;
    m_axi_img_port_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_PORT_ADDR_WIDTH-1 downto 0);
    m_axi_img_port_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_PORT_ID_WIDTH-1 downto 0);
    m_axi_img_port_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_img_port_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_img_port_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_img_port_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_img_port_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_img_port_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_img_port_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_img_port_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_img_port_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_PORT_ARUSER_WIDTH-1 downto 0);
    m_axi_img_port_RVALID : IN STD_LOGIC;
    m_axi_img_port_RREADY : OUT STD_LOGIC;
    m_axi_img_port_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IMG_PORT_DATA_WIDTH-1 downto 0);
    m_axi_img_port_RLAST : IN STD_LOGIC;
    m_axi_img_port_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IMG_PORT_ID_WIDTH-1 downto 0);
    m_axi_img_port_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMG_PORT_RUSER_WIDTH-1 downto 0);
    m_axi_img_port_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_img_port_BVALID : IN STD_LOGIC;
    m_axi_img_port_BREADY : OUT STD_LOGIC;
    m_axi_img_port_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_img_port_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IMG_PORT_ID_WIDTH-1 downto 0);
    m_axi_img_port_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMG_PORT_BUSER_WIDTH-1 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of CNN is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "CNN,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=42,HLS_SYN_DSP=5,HLS_SYN_FF=1365,HLS_SYN_LUT=1843,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000010000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000100000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000001000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000010000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000100000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000100000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000001000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000010000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000100000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000001000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000010000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000100000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (40 downto 0) := "00000000001000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (40 downto 0) := "00000000010000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (40 downto 0) := "00000000100000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (40 downto 0) := "00000001000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (40 downto 0) := "00000010000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (40 downto 0) := "00000100000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (40 downto 0) := "00001000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (40 downto 0) := "00010000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (40 downto 0) := "00100000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (40 downto 0) := "01000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (40 downto 0) := "10000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2710 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010011100010000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2584 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010010110000100";
    constant ap_const_lv17_2710 : STD_LOGIC_VECTOR (16 downto 0) := "00010011100010000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv15_2710 : STD_LOGIC_VECTOR (14 downto 0) := "010011100010000";
    constant ap_const_lv14_2710 : STD_LOGIC_VECTOR (13 downto 0) := "10011100010000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv14_2584 : STD_LOGIC_VECTOR (13 downto 0) := "10010110000100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv17_2584 : STD_LOGIC_VECTOR (16 downto 0) := "00010010110000100";
    constant ap_const_lv17_7530 : STD_LOGIC_VECTOR (16 downto 0) := "00111010100110000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal img_port_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_mid2_fu_460_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_port_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal exitcond2_reg_896 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_port_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal img_port_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond3_reg_872 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_reg_872_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal img_port_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal exitcond4_reg_926 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond1_reg_842 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal img_port_AWVALID : STD_LOGIC;
    signal img_port_AWREADY : STD_LOGIC;
    signal img_port_WVALID : STD_LOGIC;
    signal img_port_WREADY : STD_LOGIC;
    signal img_port_ARVALID : STD_LOGIC;
    signal img_port_ARREADY : STD_LOGIC;
    signal img_port_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal img_port_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal img_port_RVALID : STD_LOGIC;
    signal img_port_RREADY : STD_LOGIC;
    signal img_port_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal img_port_RLAST : STD_LOGIC;
    signal img_port_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal img_port_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal img_port_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal img_port_BVALID : STD_LOGIC;
    signal img_port_BREADY : STD_LOGIC;
    signal img_port_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal img_port_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal img_port_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_reg_305 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvar_reg_305_pp0_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state11_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar4_reg_317 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvar1_reg_328 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvar1_reg_328_pp2_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state31_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state32_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state33_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal indvar5_reg_340 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvar5_reg_340_pp3_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state42_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state43_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state44_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal reg_374 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal tmp_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_758 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_30_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_reg_763 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_fu_399_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_41_reg_768 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl1_fu_403_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl1_reg_773 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_31_fu_411_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_reg_779 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_next_fu_429_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_next_reg_788 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_793 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_mid2_fu_447_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_mid2_reg_803 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_ioackin_img_port_ARREADY : STD_LOGIC;
    signal ap_block_state3_io : BOOLEAN;
    signal p_shl1_mid2_fu_494_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl1_mid2_reg_815 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_32_mid2_fu_512_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_mid2_reg_820 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_mid2_fu_518_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_mid2_reg_825 : STD_LOGIC_VECTOR (1 downto 0);
    signal img_port_addr_reg_830 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_842_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_543_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvar_next_reg_846 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal img_port_addr_read_reg_851 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal sum_fu_594_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_reg_861 : STD_LOGIC_VECTOR (7 downto 0);
    signal img_port_addr_2_reg_866 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state17_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_img_port_WREADY : STD_LOGIC;
    signal ap_block_state19_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal indvar_next2_fu_615_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal buff_output_img_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_output_img_load_reg_886 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal j_4_fu_626_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_4_reg_891 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal exitcond2_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_896_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next1_fu_637_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvar_next1_reg_900 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal img_port_addr_1_read_reg_905 : STD_LOGIC_VECTOR (7 downto 0);
    signal img_port_addr_3_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal tmp_49_cast2_fu_661_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_49_cast2_reg_916 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal tmp_49_cast_fu_665_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_49_cast_reg_921 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond4_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_reg_926_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next3_fu_675_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvar_next3_reg_930 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal img_port_addr_3_read_reg_935 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum2_fu_707_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum2_reg_940 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal buff_output_img_addr_1_reg_955 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_5_fu_727_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_5_reg_960 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state11 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_sig_ioackin_img_port_AWREADY : STD_LOGIC;
    signal grp_CONV_fu_363_ap_ready : STD_LOGIC;
    signal grp_CONV_fu_363_ap_done : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state17 : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state31 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state42 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal buff_input_img_ce0 : STD_LOGIC;
    signal buff_input_img_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_input_img_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal buff_input_img_ce1 : STD_LOGIC;
    signal buff_input_img_we1 : STD_LOGIC;
    signal buff_input_img_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_output_img_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal buff_output_img_ce0 : STD_LOGIC;
    signal buff_output_img_we0 : STD_LOGIC;
    signal buff_output_img_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_result_img_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal buff_result_img_ce0 : STD_LOGIC;
    signal buff_result_img_we0 : STD_LOGIC;
    signal buff_result_img_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_CONV_fu_363_ap_start : STD_LOGIC;
    signal grp_CONV_fu_363_ap_idle : STD_LOGIC;
    signal grp_CONV_fu_363_input_img_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_CONV_fu_363_input_img_ce0 : STD_LOGIC;
    signal grp_CONV_fu_363_kernel_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_CONV_fu_363_kernel_ce0 : STD_LOGIC;
    signal grp_CONV_fu_363_kernel_offset : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_CONV_fu_363_output_img_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_CONV_fu_363_output_img_ce0 : STD_LOGIC;
    signal grp_CONV_fu_363_output_img_we0 : STD_LOGIC;
    signal grp_CONV_fu_363_output_img_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_reg_270 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_281 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_293 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_indvar_phi_fu_309_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_phi_mux_indvar1_phi_fu_332_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_phi_mux_indvar5_phi_fu_344_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_i_reg_352 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_CONV_fu_363_ap_start_reg : STD_LOGIC := '0';
    signal indvar2_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_fu_562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar6_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar3_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar7_fu_681_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_fu_716_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_721_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_mid2_cast_fu_482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_sum6_cast_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_sum_cast_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_img_port_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_img_port_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_img_port_WREADY : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal tmp_1_i_fu_733_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_389_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_389_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_4_fu_441_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_mid1_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_mid1_fu_470_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_30_mid1_fu_470_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_31_mid2_fu_476_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl1_mid1_fu_486_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_32_mid1_fu_500_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_cast6_fu_554_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_34_fu_557_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_42_fu_573_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_42_cast_fu_570_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_fu_576_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_33_fu_584_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_44_cast_fu_590_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_740_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_749_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_43_fu_686_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl3_fu_690_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_38_fu_698_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_53_cast_fu_703_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_fu_712_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_740_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_740_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_740_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_749_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_749_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_749_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal grp_fu_740_p10 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_749_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_30_mid1_fu_470_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_389_p10 : STD_LOGIC_VECTOR (16 downto 0);

    component CONV IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_img_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_img_ce0 : OUT STD_LOGIC;
        input_img_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        kernel_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        kernel_ce0 : OUT STD_LOGIC;
        kernel_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        kernel_offset : IN STD_LOGIC_VECTOR (7 downto 0);
        bias : IN STD_LOGIC_VECTOR (7 downto 0);
        output_img_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_img_ce0 : OUT STD_LOGIC;
        output_img_we0 : OUT STD_LOGIC;
        output_img_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component CNN_mac_muladd_15cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component CNN_mac_muladd_4ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component CNN_buff_input_img IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component CNN_buff_output_img IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component CNN_img_port_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    CNN_img_port_m_axi_U : component CNN_img_port_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IMG_PORT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IMG_PORT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IMG_PORT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IMG_PORT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IMG_PORT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IMG_PORT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IMG_PORT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IMG_PORT_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_IMG_PORT_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_IMG_PORT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IMG_PORT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IMG_PORT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_img_port_AWVALID,
        AWREADY => m_axi_img_port_AWREADY,
        AWADDR => m_axi_img_port_AWADDR,
        AWID => m_axi_img_port_AWID,
        AWLEN => m_axi_img_port_AWLEN,
        AWSIZE => m_axi_img_port_AWSIZE,
        AWBURST => m_axi_img_port_AWBURST,
        AWLOCK => m_axi_img_port_AWLOCK,
        AWCACHE => m_axi_img_port_AWCACHE,
        AWPROT => m_axi_img_port_AWPROT,
        AWQOS => m_axi_img_port_AWQOS,
        AWREGION => m_axi_img_port_AWREGION,
        AWUSER => m_axi_img_port_AWUSER,
        WVALID => m_axi_img_port_WVALID,
        WREADY => m_axi_img_port_WREADY,
        WDATA => m_axi_img_port_WDATA,
        WSTRB => m_axi_img_port_WSTRB,
        WLAST => m_axi_img_port_WLAST,
        WID => m_axi_img_port_WID,
        WUSER => m_axi_img_port_WUSER,
        ARVALID => m_axi_img_port_ARVALID,
        ARREADY => m_axi_img_port_ARREADY,
        ARADDR => m_axi_img_port_ARADDR,
        ARID => m_axi_img_port_ARID,
        ARLEN => m_axi_img_port_ARLEN,
        ARSIZE => m_axi_img_port_ARSIZE,
        ARBURST => m_axi_img_port_ARBURST,
        ARLOCK => m_axi_img_port_ARLOCK,
        ARCACHE => m_axi_img_port_ARCACHE,
        ARPROT => m_axi_img_port_ARPROT,
        ARQOS => m_axi_img_port_ARQOS,
        ARREGION => m_axi_img_port_ARREGION,
        ARUSER => m_axi_img_port_ARUSER,
        RVALID => m_axi_img_port_RVALID,
        RREADY => m_axi_img_port_RREADY,
        RDATA => m_axi_img_port_RDATA,
        RLAST => m_axi_img_port_RLAST,
        RID => m_axi_img_port_RID,
        RUSER => m_axi_img_port_RUSER,
        RRESP => m_axi_img_port_RRESP,
        BVALID => m_axi_img_port_BVALID,
        BREADY => m_axi_img_port_BREADY,
        BRESP => m_axi_img_port_BRESP,
        BID => m_axi_img_port_BID,
        BUSER => m_axi_img_port_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => img_port_ARVALID,
        I_ARREADY => img_port_ARREADY,
        I_ARADDR => img_port_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => img_port_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => img_port_RVALID,
        I_RREADY => img_port_RREADY,
        I_RDATA => img_port_RDATA,
        I_RID => img_port_RID,
        I_RUSER => img_port_RUSER,
        I_RRESP => img_port_RRESP,
        I_RLAST => img_port_RLAST,
        I_AWVALID => img_port_AWVALID,
        I_AWREADY => img_port_AWREADY,
        I_AWADDR => img_port_addr_2_reg_866,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_2584,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => img_port_WVALID,
        I_WREADY => img_port_WREADY,
        I_WDATA => buff_output_img_load_reg_886,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_1,
        I_BVALID => img_port_BVALID,
        I_BREADY => img_port_BREADY,
        I_BRESP => img_port_BRESP,
        I_BID => img_port_BID,
        I_BUSER => img_port_BUSER);

    buff_input_img_U : component CNN_buff_input_img
    generic map (
        DataWidth => 8,
        AddressRange => 10000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_CONV_fu_363_input_img_address0,
        ce0 => buff_input_img_ce0,
        q0 => buff_input_img_q0,
        address1 => buff_input_img_address1,
        ce1 => buff_input_img_ce1,
        we1 => buff_input_img_we1,
        d1 => buff_input_img_d1);

    buff_output_img_U : component CNN_buff_output_img
    generic map (
        DataWidth => 8,
        AddressRange => 9604,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buff_output_img_address0,
        ce0 => buff_output_img_ce0,
        we0 => buff_output_img_we0,
        d0 => buff_output_img_d0,
        q0 => buff_output_img_q0);

    buff_result_img_U : component CNN_buff_output_img
    generic map (
        DataWidth => 8,
        AddressRange => 9604,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buff_result_img_address0,
        ce0 => buff_result_img_ce0,
        we0 => buff_result_img_we0,
        d0 => img_port_addr_3_read_reg_935,
        q0 => buff_result_img_q0);

    grp_CONV_fu_363 : component CONV
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_CONV_fu_363_ap_start,
        ap_done => grp_CONV_fu_363_ap_done,
        ap_idle => grp_CONV_fu_363_ap_idle,
        ap_ready => grp_CONV_fu_363_ap_ready,
        input_img_address0 => grp_CONV_fu_363_input_img_address0,
        input_img_ce0 => grp_CONV_fu_363_input_img_ce0,
        input_img_q0 => buff_input_img_q0,
        kernel_address0 => grp_CONV_fu_363_kernel_address0,
        kernel_ce0 => grp_CONV_fu_363_kernel_ce0,
        kernel_q0 => kernel_q0,
        kernel_offset => grp_CONV_fu_363_kernel_offset,
        bias => reg_374,
        output_img_address0 => grp_CONV_fu_363_output_img_address0,
        output_img_ce0 => grp_CONV_fu_363_output_img_ce0,
        output_img_we0 => grp_CONV_fu_363_output_img_we0,
        output_img_d0 => grp_CONV_fu_363_output_img_d0);

    CNN_mac_muladd_15cud_U13 : component CNN_mac_muladd_15cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 4,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        din0 => grp_fu_740_p0,
        din1 => grp_fu_740_p1,
        din2 => grp_fu_740_p2,
        dout => grp_fu_740_p3);

    CNN_mac_muladd_4ndEe_U14 : component CNN_mac_muladd_4ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 15,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        din0 => grp_fu_749_p0,
        din1 => grp_fu_749_p1,
        din2 => grp_fu_749_p2,
        dout => grp_fu_749_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state11)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state11);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state17) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((not(((grp_CONV_fu_363_ap_done = ap_const_logic_0) or (ap_sig_ioackin_img_port_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state17)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state17);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((not(((grp_CONV_fu_363_ap_done = ap_const_logic_0) or (ap_sig_ioackin_img_port_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state31) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state31)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state31);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state42) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state42)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state42);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_img_port_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_img_port_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_img_port_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_sig_ioackin_img_port_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_mid2_fu_460_p3 = ap_const_lv1_0)))) then 
                    ap_reg_ioackin_img_port_ARREADY <= ap_const_logic_0;
                elsif ((((img_port_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((img_port_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((img_port_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_mid2_fu_460_p3 = ap_const_lv1_0)))) then 
                    ap_reg_ioackin_img_port_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_img_port_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_img_port_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                    if (not(((grp_CONV_fu_363_ap_done = ap_const_logic_0) or (ap_sig_ioackin_img_port_AWREADY = ap_const_logic_0)))) then 
                        ap_reg_ioackin_img_port_AWREADY <= ap_const_logic_0;
                    elsif (((grp_CONV_fu_363_ap_done = ap_const_logic_1) and (img_port_AWREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_img_port_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_img_port_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_img_port_WREADY <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (exitcond3_reg_872_pp1_iter1_reg = ap_const_lv1_0))) then
                    if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then 
                        ap_reg_ioackin_img_port_WREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (img_port_WREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_img_port_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    grp_CONV_fu_363_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_CONV_fu_363_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    grp_CONV_fu_363_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_CONV_fu_363_ap_ready = ap_const_logic_1)) then 
                    grp_CONV_fu_363_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                i_i_reg_352 <= i_5_reg_960;
            elsif (((grp_CONV_fu_363_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                i_i_reg_352 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((img_port_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                i_reg_281 <= i_mid2_reg_825;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_281 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar1_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                indvar1_reg_328 <= ap_const_lv14_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond2_reg_896 = ap_const_lv1_0))) then 
                indvar1_reg_328 <= indvar_next1_reg_900;
            end if; 
        end if;
    end process;

    indvar4_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond3_fu_609_p2 = ap_const_lv1_0))) then 
                indvar4_reg_317 <= indvar_next2_fu_615_p2;
            elsif ((not(((grp_CONV_fu_363_ap_done = ap_const_logic_0) or (ap_sig_ioackin_img_port_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                indvar4_reg_317 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    indvar5_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond4_reg_926 = ap_const_lv1_0))) then 
                indvar5_reg_340 <= indvar_next3_reg_930;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                indvar5_reg_340 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((img_port_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                indvar_flatten_reg_270 <= indvar_flatten_next_reg_788;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_270 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                indvar_reg_305 <= ap_const_lv14_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond1_reg_842 = ap_const_lv1_0))) then 
                indvar_reg_305 <= indvar_next_reg_846;
            end if; 
        end if;
    end process;

    j_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((img_port_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                j_reg_293 <= j_4_reg_891;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_reg_293 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                buff_output_img_addr_1_reg_955 <= tmp_i_fu_721_p1(14 - 1 downto 0);
                i_5_reg_960 <= i_5_fu_727_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond3_reg_872 = ap_const_lv1_0))) then
                buff_output_img_load_reg_886 <= buff_output_img_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond1_reg_842 <= exitcond1_fu_537_p2;
                exitcond1_reg_842_pp0_iter1_reg <= exitcond1_reg_842;
                indvar_reg_305_pp0_iter1_reg <= indvar_reg_305;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                exitcond2_reg_896 <= exitcond2_fu_631_p2;
                exitcond2_reg_896_pp2_iter1_reg <= exitcond2_reg_896;
                indvar1_reg_328_pp2_iter1_reg <= indvar1_reg_328;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond3_reg_872 <= exitcond3_fu_609_p2;
                exitcond3_reg_872_pp1_iter1_reg <= exitcond3_reg_872;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                exitcond4_reg_926 <= exitcond4_fu_669_p2;
                exitcond4_reg_926_pp3_iter1_reg <= exitcond4_reg_926;
                indvar5_reg_340_pp3_iter1_reg <= indvar5_reg_340;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_flatten_fu_423_p2 = ap_const_lv1_0))) then
                exitcond_reg_793 <= exitcond_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                i_mid2_reg_825 <= i_mid2_fu_518_p3;
                j_mid2_reg_803 <= j_mid2_fu_447_p3;
                    p_shl1_mid2_reg_815(4 downto 3) <= p_shl1_mid2_fu_494_p3(4 downto 3);
                    tmp_32_mid2_reg_820(4 downto 3) <= tmp_32_mid2_fu_512_p3(4 downto 3);    tmp_32_mid2_reg_820(7 downto 6) <= tmp_32_mid2_fu_512_p3(7 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond2_reg_896 = ap_const_lv1_0))) then
                img_port_addr_1_read_reg_905 <= img_port_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                    img_port_addr_2_reg_866(16 downto 0) <= p_sum6_cast_fu_600_p1(32 - 1 downto 0)(16 downto 0);
                sum_reg_861 <= sum_fu_594_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond4_reg_926 = ap_const_lv1_0))) then
                img_port_addr_3_read_reg_935 <= img_port_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                    img_port_addr_3_reg_910(16 downto 0) <= p_sum_cast_fu_652_p1(32 - 1 downto 0)(16 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond1_reg_842 = ap_const_lv1_0))) then
                img_port_addr_read_reg_851 <= img_port_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_mid2_fu_460_p3 = ap_const_lv1_1))) then
                    img_port_addr_reg_830(14 downto 0) <= tmp_31_mid2_cast_fu_482_p1(32 - 1 downto 0)(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                indvar_flatten_next_reg_788 <= indvar_flatten_next_fu_429_p2;
                    p_shl1_reg_773(4 downto 3) <= p_shl1_fu_403_p3(4 downto 3);
                    tmp_30_reg_763(16 downto 0) <= tmp_30_fu_395_p1(16 downto 0);
                    tmp_31_reg_779(4 downto 3) <= tmp_31_fu_411_p5(4 downto 3);    tmp_31_reg_779(7 downto 6) <= tmp_31_fu_411_p5(7 downto 6);
                tmp_41_reg_768 <= tmp_41_fu_399_p1;
                tmp_reg_758 <= tmp_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                indvar_next1_reg_900 <= indvar_next1_fu_637_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                indvar_next3_reg_930 <= indvar_next3_fu_675_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_next_reg_846 <= indvar_next_fu_543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                j_4_reg_891 <= j_4_fu_626_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_374 <= bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                sum2_reg_940 <= sum2_fu_707_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                    tmp_49_cast2_reg_916(3 downto 0) <= tmp_49_cast2_fu_661_p1(3 downto 0);
                    tmp_49_cast_reg_921(3 downto 0) <= tmp_49_cast_fu_665_p1(3 downto 0);
            end if;
        end if;
    end process;
    tmp_30_reg_763(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    p_shl1_reg_773(2 downto 0) <= "000";
    tmp_31_reg_779(2 downto 0) <= "000";
    tmp_31_reg_779(5) <= '0';
    p_shl1_mid2_reg_815(2 downto 0) <= "000";
    tmp_32_mid2_reg_820(2 downto 0) <= "000";
    tmp_32_mid2_reg_820(5) <= '0';
    img_port_addr_reg_830(31 downto 15) <= "00000000000000000";
    img_port_addr_2_reg_866(31 downto 17) <= "000000000000000";
    img_port_addr_3_reg_910(31 downto 17) <= "000000000000000";
    tmp_49_cast2_reg_916(4) <= '0';
    tmp_49_cast_reg_921(5 downto 4) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, tmp_mid2_fu_460_p3, ap_enable_reg_pp2_iter1, ap_CS_fsm_state16, ap_enable_reg_pp1_iter2, ap_CS_fsm_state24, ap_CS_fsm_state35, ap_enable_reg_pp3_iter1, ap_enable_reg_pp0_iter1, ap_CS_fsm_state4, img_port_BVALID, ap_CS_fsm_state2, exitcond_flatten_fu_423_p2, ap_sig_ioackin_img_port_ARREADY, ap_block_state3_io, exitcond1_fu_537_p2, ap_enable_reg_pp0_iter0, exitcond3_fu_609_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, exitcond2_fu_631_p2, ap_enable_reg_pp2_iter0, exitcond4_fu_669_p2, ap_enable_reg_pp3_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_sig_ioackin_img_port_AWREADY, grp_CONV_fu_363_ap_done, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter2, ap_CS_fsm_state47)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_flatten_fu_423_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_mid2_fu_460_p3 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                elsif (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_mid2_fu_460_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_sig_ioackin_img_port_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond1_fu_537_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond1_fu_537_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if ((not(((grp_CONV_fu_363_ap_done = ap_const_logic_0) or (ap_sig_ioackin_img_port_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (exitcond3_fu_609_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (exitcond3_fu_609_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((img_port_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond2_fu_631_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond2_fu_631_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((ap_sig_ioackin_img_port_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (exitcond4_fu_669_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (exitcond4_fu_669_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((grp_CONV_fu_363_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(14);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(26);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(35);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(15);
    ap_CS_fsm_state24 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(25);
    ap_CS_fsm_state34 <= ap_CS_fsm(27);
    ap_CS_fsm_state35 <= ap_CS_fsm(28);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state41 <= ap_CS_fsm(34);
    ap_CS_fsm_state45 <= ap_CS_fsm(36);
    ap_CS_fsm_state46 <= ap_CS_fsm(37);
    ap_CS_fsm_state47 <= ap_CS_fsm(38);
    ap_CS_fsm_state48 <= ap_CS_fsm(39);
    ap_CS_fsm_state49 <= ap_CS_fsm(40);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond1_reg_842, img_port_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((img_port_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond1_reg_842 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond1_reg_842, img_port_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((img_port_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond1_reg_842 = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state19_io)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state19_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state19_io)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state19_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter1, exitcond2_reg_896, img_port_RVALID)
    begin
                ap_block_pp2_stage0_11001 <= ((img_port_RVALID = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (exitcond2_reg_896 = ap_const_lv1_0));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, exitcond2_reg_896, img_port_RVALID)
    begin
                ap_block_pp2_stage0_subdone <= ((img_port_RVALID = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (exitcond2_reg_896 = ap_const_lv1_0));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter1, exitcond4_reg_926, img_port_RVALID)
    begin
                ap_block_pp3_stage0_11001 <= ((img_port_RVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (exitcond4_reg_926 = ap_const_lv1_0));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter1, exitcond4_reg_926, img_port_RVALID)
    begin
                ap_block_pp3_stage0_subdone <= ((img_port_RVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (exitcond4_reg_926 = ap_const_lv1_0));
    end process;

        ap_block_state11_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage0_iter1_assign_proc : process(exitcond1_reg_842, img_port_RVALID)
    begin
                ap_block_state12_pp0_stage0_iter1 <= ((img_port_RVALID = ap_const_logic_0) and (exitcond1_reg_842 = ap_const_lv1_0));
    end process;

        ap_block_state13_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_io_assign_proc : process(exitcond3_reg_872_pp1_iter1_reg, ap_sig_ioackin_img_port_WREADY)
    begin
                ap_block_state19_io <= ((ap_sig_ioackin_img_port_WREADY = ap_const_logic_0) and (exitcond3_reg_872_pp1_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state19_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state32_pp2_stage0_iter1_assign_proc : process(exitcond2_reg_896, img_port_RVALID)
    begin
                ap_block_state32_pp2_stage0_iter1 <= ((img_port_RVALID = ap_const_logic_0) and (exitcond2_reg_896 = ap_const_lv1_0));
    end process;

        ap_block_state33_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(tmp_mid2_fu_460_p3, ap_sig_ioackin_img_port_ARREADY)
    begin
                ap_block_state3_io <= ((ap_sig_ioackin_img_port_ARREADY = ap_const_logic_0) and (tmp_mid2_fu_460_p3 = ap_const_lv1_0));
    end process;

        ap_block_state42_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state43_pp3_stage0_iter1_assign_proc : process(exitcond4_reg_926, img_port_RVALID)
    begin
                ap_block_state43_pp3_stage0_iter1 <= ((img_port_RVALID = ap_const_logic_0) and (exitcond4_reg_926 = ap_const_lv1_0));
    end process;

        ap_block_state44_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state11_assign_proc : process(exitcond1_fu_537_p2)
    begin
        if ((exitcond1_fu_537_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state17_assign_proc : process(exitcond3_fu_609_p2)
    begin
        if ((exitcond3_fu_609_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state17 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state31_assign_proc : process(exitcond2_fu_631_p2)
    begin
        if ((exitcond2_fu_631_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state31 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state42_assign_proc : process(exitcond4_fu_669_p2)
    begin
        if ((exitcond4_fu_669_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state42 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state42 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond_flatten_fu_423_p2)
    begin
        if (((exitcond_flatten_fu_423_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar1_phi_fu_332_p4_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, exitcond2_reg_896, indvar1_reg_328, indvar_next1_reg_900)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (exitcond2_reg_896 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar1_phi_fu_332_p4 <= indvar_next1_reg_900;
        else 
            ap_phi_mux_indvar1_phi_fu_332_p4 <= indvar1_reg_328;
        end if; 
    end process;


    ap_phi_mux_indvar5_phi_fu_344_p4_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, exitcond4_reg_926, indvar5_reg_340, indvar_next3_reg_930)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (exitcond4_reg_926 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar5_phi_fu_344_p4 <= indvar_next3_reg_930;
        else 
            ap_phi_mux_indvar5_phi_fu_344_p4 <= indvar5_reg_340;
        end if; 
    end process;


    ap_phi_mux_indvar_phi_fu_309_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond1_reg_842, indvar_reg_305, indvar_next_reg_846)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond1_reg_842 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_phi_fu_309_p4 <= indvar_next_reg_846;
        else 
            ap_phi_mux_indvar_phi_fu_309_p4 <= indvar_reg_305;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_flatten_fu_423_p2)
    begin
        if (((exitcond_flatten_fu_423_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_img_port_ARREADY_assign_proc : process(img_port_ARREADY, ap_reg_ioackin_img_port_ARREADY)
    begin
        if ((ap_reg_ioackin_img_port_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_img_port_ARREADY <= img_port_ARREADY;
        else 
            ap_sig_ioackin_img_port_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_img_port_AWREADY_assign_proc : process(img_port_AWREADY, ap_reg_ioackin_img_port_AWREADY)
    begin
        if ((ap_reg_ioackin_img_port_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_img_port_AWREADY <= img_port_AWREADY;
        else 
            ap_sig_ioackin_img_port_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_img_port_WREADY_assign_proc : process(img_port_WREADY, ap_reg_ioackin_img_port_WREADY)
    begin
        if ((ap_reg_ioackin_img_port_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_img_port_WREADY <= img_port_WREADY;
        else 
            ap_sig_ioackin_img_port_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    bias_address0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state45, tmp_35_fu_562_p1, tmp_40_fu_716_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            bias_address0 <= tmp_40_fu_716_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            bias_address0 <= tmp_35_fu_562_p1(3 - 1 downto 0);
        else 
            bias_address0 <= "XXX";
        end if; 
    end process;


    bias_ce0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_input_img_address1_assign_proc : process(ap_block_pp2_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter2, indvar2_fu_549_p1, indvar3_fu_643_p1)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            buff_input_img_address1 <= indvar3_fu_643_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buff_input_img_address1 <= indvar2_fu_549_p1(14 - 1 downto 0);
        else 
            buff_input_img_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    buff_input_img_ce0_assign_proc : process(ap_CS_fsm_state16, grp_CONV_fu_363_input_img_ce0, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buff_input_img_ce0 <= grp_CONV_fu_363_input_img_ce0;
        else 
            buff_input_img_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_input_img_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            buff_input_img_ce1 <= ap_const_logic_1;
        else 
            buff_input_img_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buff_input_img_d1_assign_proc : process(ap_block_pp2_stage0, ap_block_pp0_stage0, img_port_addr_read_reg_851, img_port_addr_1_read_reg_905, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            buff_input_img_d1 <= img_port_addr_1_read_reg_905;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buff_input_img_d1 <= img_port_addr_read_reg_851;
        else 
            buff_input_img_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buff_input_img_we1_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp2_stage0_11001, exitcond1_reg_842_pp0_iter1_reg, exitcond2_reg_896_pp2_iter1_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (exitcond2_reg_896_pp2_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond1_reg_842_pp0_iter1_reg = ap_const_lv1_0)))) then 
            buff_input_img_we1 <= ap_const_logic_1;
        else 
            buff_input_img_we1 <= ap_const_logic_0;
        end if; 
    end process;


    buff_output_img_address0_assign_proc : process(ap_CS_fsm_state16, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state48, buff_output_img_addr_1_reg_955, grp_CONV_fu_363_output_img_address0, ap_CS_fsm_state47, ap_CS_fsm_state49, indvar6_fu_621_p1, tmp_i_fu_721_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            buff_output_img_address0 <= buff_output_img_addr_1_reg_955;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            buff_output_img_address0 <= tmp_i_fu_721_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            buff_output_img_address0 <= indvar6_fu_621_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buff_output_img_address0 <= grp_CONV_fu_363_output_img_address0;
        else 
            buff_output_img_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    buff_output_img_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state48, grp_CONV_fu_363_output_img_ce0, ap_CS_fsm_state47, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            buff_output_img_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buff_output_img_ce0 <= grp_CONV_fu_363_output_img_ce0;
        else 
            buff_output_img_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_output_img_d0_assign_proc : process(ap_CS_fsm_state16, grp_CONV_fu_363_output_img_d0, ap_CS_fsm_state47, ap_CS_fsm_state49, tmp_1_i_fu_733_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            buff_output_img_d0 <= tmp_1_i_fu_733_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buff_output_img_d0 <= grp_CONV_fu_363_output_img_d0;
        else 
            buff_output_img_d0 <= "XXXXXXXX";
        end if; 
    end process;


    buff_output_img_we0_assign_proc : process(ap_CS_fsm_state16, grp_CONV_fu_363_output_img_we0, ap_CS_fsm_state47, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            buff_output_img_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buff_output_img_we0 <= grp_CONV_fu_363_output_img_we0;
        else 
            buff_output_img_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_result_img_address0_assign_proc : process(ap_block_pp3_stage0, ap_CS_fsm_state48, ap_enable_reg_pp3_iter2, indvar7_fu_681_p1, tmp_i_fu_721_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            buff_result_img_address0 <= tmp_i_fu_721_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            buff_result_img_address0 <= indvar7_fu_681_p1(14 - 1 downto 0);
        else 
            buff_result_img_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    buff_result_img_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_state48, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)))) then 
            buff_result_img_ce0 <= ap_const_logic_1;
        else 
            buff_result_img_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_result_img_we0_assign_proc : process(ap_block_pp3_stage0_11001, exitcond4_reg_926_pp3_iter1_reg, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (exitcond4_reg_926_pp3_iter1_reg = ap_const_lv1_0))) then 
            buff_result_img_we0 <= ap_const_logic_1;
        else 
            buff_result_img_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_537_p2 <= "1" when (ap_phi_mux_indvar_phi_fu_309_p4 = ap_const_lv14_2710) else "0";
    exitcond2_fu_631_p2 <= "1" when (ap_phi_mux_indvar1_phi_fu_332_p4 = ap_const_lv14_2710) else "0";
    exitcond3_fu_609_p2 <= "1" when (indvar4_reg_317 = ap_const_lv14_2584) else "0";
    exitcond4_fu_669_p2 <= "1" when (ap_phi_mux_indvar5_phi_fu_344_p4 = ap_const_lv14_2584) else "0";
    exitcond_flatten_fu_423_p2 <= "1" when (indvar_flatten_reg_270 = ap_const_lv5_18) else "0";
    exitcond_fu_435_p2 <= "1" when (j_reg_293 = ap_const_lv4_8) else "0";
    grp_CONV_fu_363_ap_start <= grp_CONV_fu_363_ap_start_reg;

    grp_CONV_fu_363_kernel_offset_assign_proc : process(ap_CS_fsm_state16, sum_reg_861, sum2_reg_940, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_CONV_fu_363_kernel_offset <= sum2_reg_940;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_CONV_fu_363_kernel_offset <= sum_reg_861;
        else 
            grp_CONV_fu_363_kernel_offset <= "XXXXXXXX";
        end if; 
    end process;

    grp_fu_740_p0 <= ap_const_lv17_2584(15 - 1 downto 0);
    grp_fu_740_p1 <= grp_fu_740_p10(4 - 1 downto 0);
    grp_fu_740_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_803),17));
    grp_fu_740_p2 <= ap_const_lv17_7530(16 - 1 downto 0);
    grp_fu_749_p0 <= grp_fu_749_p00(4 - 1 downto 0);
    grp_fu_749_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_293),17));
    grp_fu_749_p1 <= ap_const_lv17_2584(15 - 1 downto 0);
    grp_fu_749_p2 <= ap_const_lv17_7530(16 - 1 downto 0);
    i_4_fu_441_p2 <= std_logic_vector(unsigned(i_reg_281) + unsigned(ap_const_lv2_1));
    i_5_fu_727_p2 <= std_logic_vector(signed(i_i_reg_352) + signed(ap_const_lv8_1));
    i_mid2_fu_518_p3 <= 
        i_4_fu_441_p2 when (exitcond_reg_793(0) = '1') else 
        i_reg_281;

    img_port_ARADDR_assign_proc : process(ap_CS_fsm_state3, tmp_mid2_fu_460_p3, ap_CS_fsm_state35, ap_CS_fsm_state4, tmp_30_reg_763, img_port_addr_reg_830, img_port_addr_3_reg_910, ap_reg_ioackin_img_port_ARREADY)
    begin
        if ((ap_reg_ioackin_img_port_ARREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                img_port_ARADDR <= img_port_addr_3_reg_910;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                img_port_ARADDR <= img_port_addr_reg_830;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_mid2_fu_460_p3 = ap_const_lv1_0))) then 
                img_port_ARADDR <= tmp_30_reg_763(32 - 1 downto 0);
            else 
                img_port_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            img_port_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    img_port_ARLEN_assign_proc : process(ap_CS_fsm_state3, tmp_mid2_fu_460_p3, ap_CS_fsm_state35, ap_CS_fsm_state4, ap_reg_ioackin_img_port_ARREADY)
    begin
        if (((ap_reg_ioackin_img_port_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            img_port_ARLEN <= ap_const_lv32_2584;
        elsif ((((ap_reg_ioackin_img_port_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_reg_ioackin_img_port_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_mid2_fu_460_p3 = ap_const_lv1_0)))) then 
            img_port_ARLEN <= ap_const_lv32_2710;
        else 
            img_port_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    img_port_ARVALID_assign_proc : process(ap_CS_fsm_state3, tmp_mid2_fu_460_p3, ap_CS_fsm_state35, ap_CS_fsm_state4, ap_reg_ioackin_img_port_ARREADY)
    begin
        if ((((ap_reg_ioackin_img_port_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_reg_ioackin_img_port_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((ap_reg_ioackin_img_port_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_mid2_fu_460_p3 = ap_const_lv1_0)))) then 
            img_port_ARVALID <= ap_const_logic_1;
        else 
            img_port_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    img_port_AWVALID_assign_proc : process(ap_CS_fsm_state16, grp_CONV_fu_363_ap_done, ap_reg_ioackin_img_port_AWREADY)
    begin
        if (((grp_CONV_fu_363_ap_done = ap_const_logic_1) and (ap_reg_ioackin_img_port_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            img_port_AWVALID <= ap_const_logic_1;
        else 
            img_port_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    img_port_BREADY_assign_proc : process(ap_CS_fsm_state24, img_port_BVALID)
    begin
        if (((img_port_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            img_port_BREADY <= ap_const_logic_1;
        else 
            img_port_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    img_port_RREADY_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond2_reg_896, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond4_reg_926, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond1_reg_842, ap_block_pp0_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond1_reg_842 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond4_reg_926 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond2_reg_896 = ap_const_lv1_0)))) then 
            img_port_RREADY <= ap_const_logic_1;
        else 
            img_port_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    img_port_WVALID_assign_proc : process(ap_enable_reg_pp1_iter2, exitcond3_reg_872_pp1_iter1_reg, ap_reg_ioackin_img_port_WREADY, ap_block_pp1_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (ap_reg_ioackin_img_port_WREADY = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (exitcond3_reg_872_pp1_iter1_reg = ap_const_lv1_0))) then 
            img_port_WVALID <= ap_const_logic_1;
        else 
            img_port_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    img_port_blk_n_AR_assign_proc : process(m_axi_img_port_ARREADY, ap_CS_fsm_state3, tmp_mid2_fu_460_p3, ap_CS_fsm_state35, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state35) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_mid2_fu_460_p3 = ap_const_lv1_0)))) then 
            img_port_blk_n_AR <= m_axi_img_port_ARREADY;
        else 
            img_port_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    img_port_blk_n_AW_assign_proc : process(m_axi_img_port_AWREADY, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            img_port_blk_n_AW <= m_axi_img_port_AWREADY;
        else 
            img_port_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    img_port_blk_n_B_assign_proc : process(m_axi_img_port_BVALID, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            img_port_blk_n_B <= m_axi_img_port_BVALID;
        else 
            img_port_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    img_port_blk_n_R_assign_proc : process(m_axi_img_port_RVALID, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, exitcond2_reg_896, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, exitcond4_reg_926, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond1_reg_842)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond1_reg_842 = ap_const_lv1_0)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (exitcond4_reg_926 = ap_const_lv1_0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (exitcond2_reg_896 = ap_const_lv1_0)))) then 
            img_port_blk_n_R <= m_axi_img_port_RVALID;
        else 
            img_port_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    img_port_blk_n_W_assign_proc : process(m_axi_img_port_WREADY, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, exitcond3_reg_872_pp1_iter1_reg)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (exitcond3_reg_872_pp1_iter1_reg = ap_const_lv1_0))) then 
            img_port_blk_n_W <= m_axi_img_port_WREADY;
        else 
            img_port_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    indvar2_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar_reg_305_pp0_iter1_reg),64));
    indvar3_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar1_reg_328_pp2_iter1_reg),64));
    indvar6_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar4_reg_317),64));
    indvar7_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar5_reg_340_pp3_iter1_reg),64));
    indvar_flatten_next_fu_429_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(indvar_flatten_reg_270));
    indvar_next1_fu_637_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar1_phi_fu_332_p4) + unsigned(ap_const_lv14_1));
    indvar_next2_fu_615_p2 <= std_logic_vector(unsigned(indvar4_reg_317) + unsigned(ap_const_lv14_1));
    indvar_next3_fu_675_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar5_phi_fu_344_p4) + unsigned(ap_const_lv14_1));
    indvar_next_fu_543_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_phi_fu_309_p4) + unsigned(ap_const_lv14_1));
    j_4_fu_626_p2 <= std_logic_vector(unsigned(j_mid2_reg_803) + unsigned(ap_const_lv4_1));
    j_mid2_fu_447_p3 <= 
        ap_const_lv4_0 when (exitcond_reg_793(0) = '1') else 
        j_reg_293;
    kernel_address0 <= grp_CONV_fu_363_kernel_address0;

    kernel_ce0_assign_proc : process(ap_CS_fsm_state16, grp_CONV_fu_363_kernel_ce0, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            kernel_ce0 <= grp_CONV_fu_363_kernel_ce0;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_fu_403_p3 <= (i_reg_281 & ap_const_lv3_0);
    p_shl1_mid1_fu_486_p3 <= (i_4_fu_441_p2 & ap_const_lv3_0);
    p_shl1_mid2_fu_494_p3 <= 
        p_shl1_mid1_fu_486_p3 when (exitcond_reg_793(0) = '1') else 
        p_shl1_reg_773;
    p_shl2_fu_576_p3 <= (tmp_42_fu_573_p1 & ap_const_lv3_0);
    p_shl3_fu_690_p3 <= (tmp_43_fu_686_p1 & ap_const_lv3_0);
    p_sum6_cast_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_740_p3),64));
    p_sum_cast_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_749_p3),64));
    sum2_fu_707_p2 <= std_logic_vector(unsigned(tmp_53_cast_fu_703_p1) + unsigned(tmp_31_reg_779));
    sum_fu_594_p2 <= std_logic_vector(unsigned(tmp_44_cast_fu_590_p1) + unsigned(tmp_32_mid2_reg_820));
    tmp_1_i_fu_733_p2 <= std_logic_vector(unsigned(buff_output_img_q0) + unsigned(buff_result_img_q0));
    tmp_30_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_389_p2),64));
    tmp_30_mid1_fu_470_p0 <= tmp_30_mid1_fu_470_p00(2 - 1 downto 0);
    tmp_30_mid1_fu_470_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_fu_441_p2),15));
    tmp_30_mid1_fu_470_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_mid1_fu_470_p0) * unsigned(ap_const_lv15_2710), 15));
    tmp_31_fu_411_p5 <= (((i_reg_281 & ap_const_lv1_0) & i_reg_281) & ap_const_lv3_0);
    tmp_31_mid2_cast_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_mid2_fu_476_p3),64));
    tmp_31_mid2_fu_476_p3 <= 
        tmp_30_mid1_fu_470_p2 when (exitcond_reg_793(0) = '1') else 
        tmp_41_reg_768;
    tmp_32_mid1_fu_500_p5 <= (((i_4_fu_441_p2 & ap_const_lv1_0) & i_4_fu_441_p2) & ap_const_lv3_0);
    tmp_32_mid2_fu_512_p3 <= 
        tmp_32_mid1_fu_500_p5 when (exitcond_reg_793(0) = '1') else 
        tmp_31_reg_779;
    tmp_33_fu_584_p2 <= std_logic_vector(unsigned(tmp_42_cast_fu_570_p1) + unsigned(p_shl2_fu_576_p3));
    tmp_34_fu_557_p2 <= std_logic_vector(unsigned(tmp_42_cast6_fu_554_p1) + unsigned(p_shl1_mid2_reg_815));
    tmp_35_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_557_p2),64));
    tmp_38_fu_698_p2 <= std_logic_vector(unsigned(tmp_49_cast_reg_921) + unsigned(p_shl3_fu_690_p3));
    tmp_39_fu_712_p2 <= std_logic_vector(unsigned(tmp_49_cast2_reg_916) + unsigned(p_shl1_reg_773));
    tmp_40_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_712_p2),64));
    tmp_41_fu_399_p1 <= tmp_s_fu_389_p2(15 - 1 downto 0);
    tmp_42_cast6_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_803),5));
    tmp_42_cast_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_803),6));
    tmp_42_fu_573_p1 <= j_mid2_reg_803(3 - 1 downto 0);
    tmp_43_fu_686_p1 <= j_reg_293(3 - 1 downto 0);
    tmp_44_cast_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_584_p2),8));
    tmp_49_cast2_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_293),5));
    tmp_49_cast_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_293),6));
    tmp_53_cast_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_698_p2),8));
    tmp_fu_379_p2 <= "1" when (i_reg_281 = ap_const_lv2_0) else "0";
        tmp_i_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_i_reg_352),64));

    tmp_mid1_fu_454_p2 <= "1" when (i_4_fu_441_p2 = ap_const_lv2_0) else "0";
    tmp_mid2_fu_460_p3 <= 
        tmp_mid1_fu_454_p2 when (exitcond_reg_793(0) = '1') else 
        tmp_reg_758;
    tmp_s_fu_389_p1 <= tmp_s_fu_389_p10(2 - 1 downto 0);
    tmp_s_fu_389_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_281),17));
    tmp_s_fu_389_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv17_2710) * unsigned(tmp_s_fu_389_p1), 17));
end behav;
