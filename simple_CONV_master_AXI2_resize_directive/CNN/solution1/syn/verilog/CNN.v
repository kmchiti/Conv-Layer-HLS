// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="CNN,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=42,HLS_SYN_DSP=5,HLS_SYN_FF=1365,HLS_SYN_LUT=1843,HLS_VERSION=2018_3}" *)

module CNN (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_img_port_AWVALID,
        m_axi_img_port_AWREADY,
        m_axi_img_port_AWADDR,
        m_axi_img_port_AWID,
        m_axi_img_port_AWLEN,
        m_axi_img_port_AWSIZE,
        m_axi_img_port_AWBURST,
        m_axi_img_port_AWLOCK,
        m_axi_img_port_AWCACHE,
        m_axi_img_port_AWPROT,
        m_axi_img_port_AWQOS,
        m_axi_img_port_AWREGION,
        m_axi_img_port_AWUSER,
        m_axi_img_port_WVALID,
        m_axi_img_port_WREADY,
        m_axi_img_port_WDATA,
        m_axi_img_port_WSTRB,
        m_axi_img_port_WLAST,
        m_axi_img_port_WID,
        m_axi_img_port_WUSER,
        m_axi_img_port_ARVALID,
        m_axi_img_port_ARREADY,
        m_axi_img_port_ARADDR,
        m_axi_img_port_ARID,
        m_axi_img_port_ARLEN,
        m_axi_img_port_ARSIZE,
        m_axi_img_port_ARBURST,
        m_axi_img_port_ARLOCK,
        m_axi_img_port_ARCACHE,
        m_axi_img_port_ARPROT,
        m_axi_img_port_ARQOS,
        m_axi_img_port_ARREGION,
        m_axi_img_port_ARUSER,
        m_axi_img_port_RVALID,
        m_axi_img_port_RREADY,
        m_axi_img_port_RDATA,
        m_axi_img_port_RLAST,
        m_axi_img_port_RID,
        m_axi_img_port_RUSER,
        m_axi_img_port_RRESP,
        m_axi_img_port_BVALID,
        m_axi_img_port_BREADY,
        m_axi_img_port_BRESP,
        m_axi_img_port_BID,
        m_axi_img_port_BUSER,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        bias_address0,
        bias_ce0,
        bias_q0
);

parameter    ap_ST_fsm_state1 = 41'd1;
parameter    ap_ST_fsm_state2 = 41'd2;
parameter    ap_ST_fsm_state3 = 41'd4;
parameter    ap_ST_fsm_state4 = 41'd8;
parameter    ap_ST_fsm_state5 = 41'd16;
parameter    ap_ST_fsm_state6 = 41'd32;
parameter    ap_ST_fsm_state7 = 41'd64;
parameter    ap_ST_fsm_state8 = 41'd128;
parameter    ap_ST_fsm_state9 = 41'd256;
parameter    ap_ST_fsm_state10 = 41'd512;
parameter    ap_ST_fsm_pp0_stage0 = 41'd1024;
parameter    ap_ST_fsm_state14 = 41'd2048;
parameter    ap_ST_fsm_state15 = 41'd4096;
parameter    ap_ST_fsm_state16 = 41'd8192;
parameter    ap_ST_fsm_pp1_stage0 = 41'd16384;
parameter    ap_ST_fsm_state20 = 41'd32768;
parameter    ap_ST_fsm_state21 = 41'd65536;
parameter    ap_ST_fsm_state22 = 41'd131072;
parameter    ap_ST_fsm_state23 = 41'd262144;
parameter    ap_ST_fsm_state24 = 41'd524288;
parameter    ap_ST_fsm_state25 = 41'd1048576;
parameter    ap_ST_fsm_state26 = 41'd2097152;
parameter    ap_ST_fsm_state27 = 41'd4194304;
parameter    ap_ST_fsm_state28 = 41'd8388608;
parameter    ap_ST_fsm_state29 = 41'd16777216;
parameter    ap_ST_fsm_state30 = 41'd33554432;
parameter    ap_ST_fsm_pp2_stage0 = 41'd67108864;
parameter    ap_ST_fsm_state34 = 41'd134217728;
parameter    ap_ST_fsm_state35 = 41'd268435456;
parameter    ap_ST_fsm_state36 = 41'd536870912;
parameter    ap_ST_fsm_state37 = 41'd1073741824;
parameter    ap_ST_fsm_state38 = 41'd2147483648;
parameter    ap_ST_fsm_state39 = 41'd4294967296;
parameter    ap_ST_fsm_state40 = 41'd8589934592;
parameter    ap_ST_fsm_state41 = 41'd17179869184;
parameter    ap_ST_fsm_pp3_stage0 = 41'd34359738368;
parameter    ap_ST_fsm_state45 = 41'd68719476736;
parameter    ap_ST_fsm_state46 = 41'd137438953472;
parameter    ap_ST_fsm_state47 = 41'd274877906944;
parameter    ap_ST_fsm_state48 = 41'd549755813888;
parameter    ap_ST_fsm_state49 = 41'd1099511627776;
parameter    C_M_AXI_IMG_PORT_ID_WIDTH = 1;
parameter    C_M_AXI_IMG_PORT_ADDR_WIDTH = 32;
parameter    C_M_AXI_IMG_PORT_DATA_WIDTH = 32;
parameter    C_M_AXI_IMG_PORT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IMG_PORT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IMG_PORT_WUSER_WIDTH = 1;
parameter    C_M_AXI_IMG_PORT_RUSER_WIDTH = 1;
parameter    C_M_AXI_IMG_PORT_BUSER_WIDTH = 1;
parameter    C_M_AXI_IMG_PORT_TARGET_ADDR = 0;
parameter    C_M_AXI_IMG_PORT_USER_VALUE = 0;
parameter    C_M_AXI_IMG_PORT_PROT_VALUE = 0;
parameter    C_M_AXI_IMG_PORT_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_M_AXI_IMG_PORT_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_img_port_AWVALID;
input   m_axi_img_port_AWREADY;
output  [C_M_AXI_IMG_PORT_ADDR_WIDTH - 1:0] m_axi_img_port_AWADDR;
output  [C_M_AXI_IMG_PORT_ID_WIDTH - 1:0] m_axi_img_port_AWID;
output  [7:0] m_axi_img_port_AWLEN;
output  [2:0] m_axi_img_port_AWSIZE;
output  [1:0] m_axi_img_port_AWBURST;
output  [1:0] m_axi_img_port_AWLOCK;
output  [3:0] m_axi_img_port_AWCACHE;
output  [2:0] m_axi_img_port_AWPROT;
output  [3:0] m_axi_img_port_AWQOS;
output  [3:0] m_axi_img_port_AWREGION;
output  [C_M_AXI_IMG_PORT_AWUSER_WIDTH - 1:0] m_axi_img_port_AWUSER;
output   m_axi_img_port_WVALID;
input   m_axi_img_port_WREADY;
output  [C_M_AXI_IMG_PORT_DATA_WIDTH - 1:0] m_axi_img_port_WDATA;
output  [C_M_AXI_IMG_PORT_WSTRB_WIDTH - 1:0] m_axi_img_port_WSTRB;
output   m_axi_img_port_WLAST;
output  [C_M_AXI_IMG_PORT_ID_WIDTH - 1:0] m_axi_img_port_WID;
output  [C_M_AXI_IMG_PORT_WUSER_WIDTH - 1:0] m_axi_img_port_WUSER;
output   m_axi_img_port_ARVALID;
input   m_axi_img_port_ARREADY;
output  [C_M_AXI_IMG_PORT_ADDR_WIDTH - 1:0] m_axi_img_port_ARADDR;
output  [C_M_AXI_IMG_PORT_ID_WIDTH - 1:0] m_axi_img_port_ARID;
output  [7:0] m_axi_img_port_ARLEN;
output  [2:0] m_axi_img_port_ARSIZE;
output  [1:0] m_axi_img_port_ARBURST;
output  [1:0] m_axi_img_port_ARLOCK;
output  [3:0] m_axi_img_port_ARCACHE;
output  [2:0] m_axi_img_port_ARPROT;
output  [3:0] m_axi_img_port_ARQOS;
output  [3:0] m_axi_img_port_ARREGION;
output  [C_M_AXI_IMG_PORT_ARUSER_WIDTH - 1:0] m_axi_img_port_ARUSER;
input   m_axi_img_port_RVALID;
output   m_axi_img_port_RREADY;
input  [C_M_AXI_IMG_PORT_DATA_WIDTH - 1:0] m_axi_img_port_RDATA;
input   m_axi_img_port_RLAST;
input  [C_M_AXI_IMG_PORT_ID_WIDTH - 1:0] m_axi_img_port_RID;
input  [C_M_AXI_IMG_PORT_RUSER_WIDTH - 1:0] m_axi_img_port_RUSER;
input  [1:0] m_axi_img_port_RRESP;
input   m_axi_img_port_BVALID;
output   m_axi_img_port_BREADY;
input  [1:0] m_axi_img_port_BRESP;
input  [C_M_AXI_IMG_PORT_ID_WIDTH - 1:0] m_axi_img_port_BID;
input  [C_M_AXI_IMG_PORT_BUSER_WIDTH - 1:0] m_axi_img_port_BUSER;
output  [4:0] kernel_address0;
output   kernel_ce0;
input  [7:0] kernel_q0;
output  [2:0] bias_address0;
output   bias_ce0;
input  [7:0] bias_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg kernel_ce0;
reg[2:0] bias_address0;
reg bias_ce0;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [40:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    img_port_blk_n_AR;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_mid2_fu_460_p3;
reg    img_port_blk_n_R;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] exitcond2_reg_896;
reg    img_port_blk_n_AW;
wire    ap_CS_fsm_state16;
reg    img_port_blk_n_W;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond3_reg_872;
reg   [0:0] exitcond3_reg_872_pp1_iter1_reg;
reg    img_port_blk_n_B;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg   [0:0] exitcond4_reg_926;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond1_reg_842;
wire    ap_CS_fsm_state4;
reg    img_port_AWVALID;
wire    img_port_AWREADY;
reg    img_port_WVALID;
wire    img_port_WREADY;
reg    img_port_ARVALID;
wire    img_port_ARREADY;
reg   [31:0] img_port_ARADDR;
reg   [31:0] img_port_ARLEN;
wire    img_port_RVALID;
reg    img_port_RREADY;
wire   [7:0] img_port_RDATA;
wire    img_port_RLAST;
wire   [0:0] img_port_RID;
wire   [0:0] img_port_RUSER;
wire   [1:0] img_port_RRESP;
wire    img_port_BVALID;
reg    img_port_BREADY;
wire   [1:0] img_port_BRESP;
wire   [0:0] img_port_BID;
wire   [0:0] img_port_BUSER;
reg   [13:0] indvar_reg_305;
reg   [13:0] indvar_reg_305_pp0_iter1_reg;
wire    ap_block_state11_pp0_stage0_iter0;
reg    ap_block_state12_pp0_stage0_iter1;
wire    ap_block_state13_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [13:0] indvar4_reg_317;
reg   [13:0] indvar1_reg_328;
reg   [13:0] indvar1_reg_328_pp2_iter1_reg;
wire    ap_block_state31_pp2_stage0_iter0;
reg    ap_block_state32_pp2_stage0_iter1;
wire    ap_block_state33_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
reg   [13:0] indvar5_reg_340;
reg   [13:0] indvar5_reg_340_pp3_iter1_reg;
wire    ap_block_state42_pp3_stage0_iter0;
reg    ap_block_state43_pp3_stage0_iter1;
wire    ap_block_state44_pp3_stage0_iter2;
reg    ap_block_pp3_stage0_11001;
reg   [7:0] reg_374;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state46;
wire   [0:0] tmp_fu_379_p2;
reg   [0:0] tmp_reg_758;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_30_fu_395_p1;
reg   [63:0] tmp_30_reg_763;
wire   [14:0] tmp_41_fu_399_p1;
reg   [14:0] tmp_41_reg_768;
wire   [4:0] p_shl1_fu_403_p3;
reg   [4:0] p_shl1_reg_773;
wire   [7:0] tmp_31_fu_411_p5;
reg   [7:0] tmp_31_reg_779;
wire   [4:0] indvar_flatten_next_fu_429_p2;
reg   [4:0] indvar_flatten_next_reg_788;
wire   [0:0] exitcond_fu_435_p2;
reg   [0:0] exitcond_reg_793;
wire   [0:0] exitcond_flatten_fu_423_p2;
wire   [3:0] j_mid2_fu_447_p3;
reg   [3:0] j_mid2_reg_803;
reg    ap_sig_ioackin_img_port_ARREADY;
reg    ap_block_state3_io;
wire   [4:0] p_shl1_mid2_fu_494_p3;
reg   [4:0] p_shl1_mid2_reg_815;
wire   [7:0] tmp_32_mid2_fu_512_p3;
reg   [7:0] tmp_32_mid2_reg_820;
wire   [1:0] i_mid2_fu_518_p3;
reg   [1:0] i_mid2_reg_825;
reg   [31:0] img_port_addr_reg_830;
wire   [0:0] exitcond1_fu_537_p2;
reg   [0:0] exitcond1_reg_842_pp0_iter1_reg;
wire   [13:0] indvar_next_fu_543_p2;
reg   [13:0] indvar_next_reg_846;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] img_port_addr_read_reg_851;
wire    ap_CS_fsm_state14;
wire   [7:0] sum_fu_594_p2;
reg   [7:0] sum_reg_861;
reg   [31:0] img_port_addr_2_reg_866;
wire   [0:0] exitcond3_fu_609_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state17_pp1_stage0_iter0;
wire    ap_block_state18_pp1_stage0_iter1;
wire    ap_block_state19_pp1_stage0_iter2;
reg    ap_sig_ioackin_img_port_WREADY;
reg    ap_block_state19_io;
reg    ap_block_pp1_stage0_11001;
wire   [13:0] indvar_next2_fu_615_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [7:0] buff_output_img_q0;
reg   [7:0] buff_output_img_load_reg_886;
reg    ap_enable_reg_pp1_iter1;
wire   [3:0] j_4_fu_626_p2;
reg   [3:0] j_4_reg_891;
wire    ap_CS_fsm_state20;
wire   [0:0] exitcond2_fu_631_p2;
reg   [0:0] exitcond2_reg_896_pp2_iter1_reg;
wire   [13:0] indvar_next1_fu_637_p2;
reg   [13:0] indvar_next1_reg_900;
reg    ap_enable_reg_pp2_iter0;
reg   [7:0] img_port_addr_1_read_reg_905;
reg   [31:0] img_port_addr_3_reg_910;
wire    ap_CS_fsm_state34;
wire   [4:0] tmp_49_cast2_fu_661_p1;
reg   [4:0] tmp_49_cast2_reg_916;
wire    ap_CS_fsm_state41;
wire   [5:0] tmp_49_cast_fu_665_p1;
reg   [5:0] tmp_49_cast_reg_921;
wire   [0:0] exitcond4_fu_669_p2;
reg   [0:0] exitcond4_reg_926_pp3_iter1_reg;
wire   [13:0] indvar_next3_fu_675_p2;
reg   [13:0] indvar_next3_reg_930;
reg    ap_enable_reg_pp3_iter0;
reg   [7:0] img_port_addr_3_read_reg_935;
wire   [7:0] sum2_fu_707_p2;
reg   [7:0] sum2_reg_940;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state48;
reg   [13:0] buff_output_img_addr_1_reg_955;
wire   [7:0] i_5_fu_727_p2;
reg   [7:0] i_5_reg_960;
wire    ap_CS_fsm_state10;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state11;
reg    ap_enable_reg_pp0_iter2;
reg    ap_sig_ioackin_img_port_AWREADY;
wire    grp_CONV_fu_363_ap_ready;
wire    grp_CONV_fu_363_ap_done;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state17;
wire    ap_CS_fsm_state30;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state31;
reg    ap_enable_reg_pp2_iter2;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state42;
reg    ap_enable_reg_pp3_iter2;
reg    buff_input_img_ce0;
wire   [7:0] buff_input_img_q0;
reg   [13:0] buff_input_img_address1;
reg    buff_input_img_ce1;
reg    buff_input_img_we1;
reg   [7:0] buff_input_img_d1;
reg   [13:0] buff_output_img_address0;
reg    buff_output_img_ce0;
reg    buff_output_img_we0;
reg   [7:0] buff_output_img_d0;
reg   [13:0] buff_result_img_address0;
reg    buff_result_img_ce0;
reg    buff_result_img_we0;
wire   [7:0] buff_result_img_q0;
wire    grp_CONV_fu_363_ap_start;
wire    grp_CONV_fu_363_ap_idle;
wire   [13:0] grp_CONV_fu_363_input_img_address0;
wire    grp_CONV_fu_363_input_img_ce0;
wire   [4:0] grp_CONV_fu_363_kernel_address0;
wire    grp_CONV_fu_363_kernel_ce0;
reg   [7:0] grp_CONV_fu_363_kernel_offset;
wire   [13:0] grp_CONV_fu_363_output_img_address0;
wire    grp_CONV_fu_363_output_img_ce0;
wire    grp_CONV_fu_363_output_img_we0;
wire   [7:0] grp_CONV_fu_363_output_img_d0;
reg   [4:0] indvar_flatten_reg_270;
reg   [1:0] i_reg_281;
reg   [3:0] j_reg_293;
reg   [13:0] ap_phi_mux_indvar_phi_fu_309_p4;
reg   [13:0] ap_phi_mux_indvar1_phi_fu_332_p4;
reg   [13:0] ap_phi_mux_indvar5_phi_fu_344_p4;
reg  signed [7:0] i_i_reg_352;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state49;
reg    grp_CONV_fu_363_ap_start_reg;
wire   [63:0] indvar2_fu_549_p1;
wire   [63:0] tmp_35_fu_562_p1;
wire   [63:0] indvar6_fu_621_p1;
wire   [63:0] indvar3_fu_643_p1;
wire   [63:0] indvar7_fu_681_p1;
wire   [63:0] tmp_40_fu_716_p1;
wire  signed [63:0] tmp_i_fu_721_p1;
wire   [63:0] tmp_31_mid2_cast_fu_482_p1;
wire   [63:0] p_sum6_cast_fu_600_p1;
wire   [63:0] p_sum_cast_fu_652_p1;
reg    ap_reg_ioackin_img_port_ARREADY;
reg    ap_reg_ioackin_img_port_AWREADY;
reg    ap_reg_ioackin_img_port_WREADY;
wire    ap_block_pp1_stage0_01001;
wire   [7:0] tmp_1_i_fu_733_p2;
wire   [1:0] tmp_s_fu_389_p1;
wire   [16:0] tmp_s_fu_389_p2;
wire   [1:0] i_4_fu_441_p2;
wire   [0:0] tmp_mid1_fu_454_p2;
wire   [1:0] tmp_30_mid1_fu_470_p0;
wire   [14:0] tmp_30_mid1_fu_470_p2;
wire   [14:0] tmp_31_mid2_fu_476_p3;
wire   [4:0] p_shl1_mid1_fu_486_p3;
wire   [7:0] tmp_32_mid1_fu_500_p5;
wire   [4:0] tmp_42_cast6_fu_554_p1;
wire   [4:0] tmp_34_fu_557_p2;
wire   [2:0] tmp_42_fu_573_p1;
wire   [5:0] tmp_42_cast_fu_570_p1;
wire   [5:0] p_shl2_fu_576_p3;
wire   [5:0] tmp_33_fu_584_p2;
wire   [7:0] tmp_44_cast_fu_590_p1;
wire   [16:0] grp_fu_740_p3;
wire   [16:0] grp_fu_749_p3;
wire   [2:0] tmp_43_fu_686_p1;
wire   [5:0] p_shl3_fu_690_p3;
wire   [5:0] tmp_38_fu_698_p2;
wire   [7:0] tmp_53_cast_fu_703_p1;
wire   [4:0] tmp_39_fu_712_p2;
wire   [14:0] grp_fu_740_p0;
wire   [3:0] grp_fu_740_p1;
wire   [15:0] grp_fu_740_p2;
wire   [3:0] grp_fu_749_p0;
wire   [14:0] grp_fu_749_p1;
wire   [15:0] grp_fu_749_p2;
reg   [40:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire   [16:0] grp_fu_740_p10;
wire   [16:0] grp_fu_749_p00;
wire   [14:0] tmp_30_mid1_fu_470_p00;
wire   [16:0] tmp_s_fu_389_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 41'd1;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 grp_CONV_fu_363_ap_start_reg = 1'b0;
#0 ap_reg_ioackin_img_port_ARREADY = 1'b0;
#0 ap_reg_ioackin_img_port_AWREADY = 1'b0;
#0 ap_reg_ioackin_img_port_WREADY = 1'b0;
end

CNN_img_port_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IMG_PORT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IMG_PORT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IMG_PORT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IMG_PORT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IMG_PORT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IMG_PORT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IMG_PORT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IMG_PORT_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_IMG_PORT_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_IMG_PORT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IMG_PORT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IMG_PORT_CACHE_VALUE ))
CNN_img_port_m_axi_U(
    .AWVALID(m_axi_img_port_AWVALID),
    .AWREADY(m_axi_img_port_AWREADY),
    .AWADDR(m_axi_img_port_AWADDR),
    .AWID(m_axi_img_port_AWID),
    .AWLEN(m_axi_img_port_AWLEN),
    .AWSIZE(m_axi_img_port_AWSIZE),
    .AWBURST(m_axi_img_port_AWBURST),
    .AWLOCK(m_axi_img_port_AWLOCK),
    .AWCACHE(m_axi_img_port_AWCACHE),
    .AWPROT(m_axi_img_port_AWPROT),
    .AWQOS(m_axi_img_port_AWQOS),
    .AWREGION(m_axi_img_port_AWREGION),
    .AWUSER(m_axi_img_port_AWUSER),
    .WVALID(m_axi_img_port_WVALID),
    .WREADY(m_axi_img_port_WREADY),
    .WDATA(m_axi_img_port_WDATA),
    .WSTRB(m_axi_img_port_WSTRB),
    .WLAST(m_axi_img_port_WLAST),
    .WID(m_axi_img_port_WID),
    .WUSER(m_axi_img_port_WUSER),
    .ARVALID(m_axi_img_port_ARVALID),
    .ARREADY(m_axi_img_port_ARREADY),
    .ARADDR(m_axi_img_port_ARADDR),
    .ARID(m_axi_img_port_ARID),
    .ARLEN(m_axi_img_port_ARLEN),
    .ARSIZE(m_axi_img_port_ARSIZE),
    .ARBURST(m_axi_img_port_ARBURST),
    .ARLOCK(m_axi_img_port_ARLOCK),
    .ARCACHE(m_axi_img_port_ARCACHE),
    .ARPROT(m_axi_img_port_ARPROT),
    .ARQOS(m_axi_img_port_ARQOS),
    .ARREGION(m_axi_img_port_ARREGION),
    .ARUSER(m_axi_img_port_ARUSER),
    .RVALID(m_axi_img_port_RVALID),
    .RREADY(m_axi_img_port_RREADY),
    .RDATA(m_axi_img_port_RDATA),
    .RLAST(m_axi_img_port_RLAST),
    .RID(m_axi_img_port_RID),
    .RUSER(m_axi_img_port_RUSER),
    .RRESP(m_axi_img_port_RRESP),
    .BVALID(m_axi_img_port_BVALID),
    .BREADY(m_axi_img_port_BREADY),
    .BRESP(m_axi_img_port_BRESP),
    .BID(m_axi_img_port_BID),
    .BUSER(m_axi_img_port_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(img_port_ARVALID),
    .I_ARREADY(img_port_ARREADY),
    .I_ARADDR(img_port_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(img_port_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(img_port_RVALID),
    .I_RREADY(img_port_RREADY),
    .I_RDATA(img_port_RDATA),
    .I_RID(img_port_RID),
    .I_RUSER(img_port_RUSER),
    .I_RRESP(img_port_RRESP),
    .I_RLAST(img_port_RLAST),
    .I_AWVALID(img_port_AWVALID),
    .I_AWREADY(img_port_AWREADY),
    .I_AWADDR(img_port_addr_2_reg_866),
    .I_AWID(1'd0),
    .I_AWLEN(32'd9604),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(img_port_WVALID),
    .I_WREADY(img_port_WREADY),
    .I_WDATA(buff_output_img_load_reg_886),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd1),
    .I_BVALID(img_port_BVALID),
    .I_BREADY(img_port_BREADY),
    .I_BRESP(img_port_BRESP),
    .I_BID(img_port_BID),
    .I_BUSER(img_port_BUSER)
);

CNN_buff_input_img #(
    .DataWidth( 8 ),
    .AddressRange( 10000 ),
    .AddressWidth( 14 ))
buff_input_img_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_CONV_fu_363_input_img_address0),
    .ce0(buff_input_img_ce0),
    .q0(buff_input_img_q0),
    .address1(buff_input_img_address1),
    .ce1(buff_input_img_ce1),
    .we1(buff_input_img_we1),
    .d1(buff_input_img_d1)
);

CNN_buff_output_img #(
    .DataWidth( 8 ),
    .AddressRange( 9604 ),
    .AddressWidth( 14 ))
buff_output_img_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buff_output_img_address0),
    .ce0(buff_output_img_ce0),
    .we0(buff_output_img_we0),
    .d0(buff_output_img_d0),
    .q0(buff_output_img_q0)
);

CNN_buff_output_img #(
    .DataWidth( 8 ),
    .AddressRange( 9604 ),
    .AddressWidth( 14 ))
buff_result_img_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buff_result_img_address0),
    .ce0(buff_result_img_ce0),
    .we0(buff_result_img_we0),
    .d0(img_port_addr_3_read_reg_935),
    .q0(buff_result_img_q0)
);

CONV grp_CONV_fu_363(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_CONV_fu_363_ap_start),
    .ap_done(grp_CONV_fu_363_ap_done),
    .ap_idle(grp_CONV_fu_363_ap_idle),
    .ap_ready(grp_CONV_fu_363_ap_ready),
    .input_img_address0(grp_CONV_fu_363_input_img_address0),
    .input_img_ce0(grp_CONV_fu_363_input_img_ce0),
    .input_img_q0(buff_input_img_q0),
    .kernel_address0(grp_CONV_fu_363_kernel_address0),
    .kernel_ce0(grp_CONV_fu_363_kernel_ce0),
    .kernel_q0(kernel_q0),
    .kernel_offset(grp_CONV_fu_363_kernel_offset),
    .bias(reg_374),
    .output_img_address0(grp_CONV_fu_363_output_img_address0),
    .output_img_ce0(grp_CONV_fu_363_output_img_ce0),
    .output_img_we0(grp_CONV_fu_363_output_img_we0),
    .output_img_d0(grp_CONV_fu_363_output_img_d0)
);

CNN_mac_muladd_15cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
CNN_mac_muladd_15cud_U13(
    .din0(grp_fu_740_p0),
    .din1(grp_fu_740_p1),
    .din2(grp_fu_740_p2),
    .dout(grp_fu_740_p3)
);

CNN_mac_muladd_4ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
CNN_mac_muladd_4ndEe_U14(
    .din0(grp_fu_749_p0),
    .din1(grp_fu_749_p1),
    .din2(grp_fu_749_p2),
    .dout(grp_fu_749_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state11)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state11);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state17) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((~((grp_CONV_fu_363_ap_done == 1'b0) | (ap_sig_ioackin_img_port_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state17)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state17);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((~((grp_CONV_fu_363_ap_done == 1'b0) | (ap_sig_ioackin_img_port_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state31) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state30)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state31)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state31);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state30)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state42) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state41)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state42)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state42);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state41)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_img_port_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_img_port_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((ap_sig_ioackin_img_port_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3) & (tmp_mid2_fu_460_p3 == 1'd0)))) begin
            ap_reg_ioackin_img_port_ARREADY <= 1'b0;
        end else if ((((img_port_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((img_port_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((img_port_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3) & (tmp_mid2_fu_460_p3 == 1'd0)))) begin
            ap_reg_ioackin_img_port_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_img_port_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state16)) begin
            if (~((grp_CONV_fu_363_ap_done == 1'b0) | (ap_sig_ioackin_img_port_AWREADY == 1'b0))) begin
                ap_reg_ioackin_img_port_AWREADY <= 1'b0;
            end else if (((grp_CONV_fu_363_ap_done == 1'b1) & (img_port_AWREADY == 1'b1))) begin
                ap_reg_ioackin_img_port_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_img_port_WREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp1_iter2 == 1'b1) & (exitcond3_reg_872_pp1_iter1_reg == 1'd0))) begin
            if ((1'b0 == ap_block_pp1_stage0_11001)) begin
                ap_reg_ioackin_img_port_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp1_stage0_01001) & (img_port_WREADY == 1'b1))) begin
                ap_reg_ioackin_img_port_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_CONV_fu_363_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state15))) begin
            grp_CONV_fu_363_ap_start_reg <= 1'b1;
        end else if ((grp_CONV_fu_363_ap_ready == 1'b1)) begin
            grp_CONV_fu_363_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        i_i_reg_352 <= i_5_reg_960;
    end else if (((grp_CONV_fu_363_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state47))) begin
        i_i_reg_352 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((img_port_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        i_reg_281 <= i_mid2_reg_825;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_281 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        indvar1_reg_328 <= 14'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond2_reg_896 == 1'd0))) begin
        indvar1_reg_328 <= indvar_next1_reg_900;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond3_fu_609_p2 == 1'd0))) begin
        indvar4_reg_317 <= indvar_next2_fu_615_p2;
    end else if ((~((grp_CONV_fu_363_ap_done == 1'b0) | (ap_sig_ioackin_img_port_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        indvar4_reg_317 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond4_reg_926 == 1'd0))) begin
        indvar5_reg_340 <= indvar_next3_reg_930;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        indvar5_reg_340 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((img_port_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        indvar_flatten_reg_270 <= indvar_flatten_next_reg_788;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_270 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        indvar_reg_305 <= 14'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_842 == 1'd0))) begin
        indvar_reg_305 <= indvar_next_reg_846;
    end
end

always @ (posedge ap_clk) begin
    if (((img_port_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        j_reg_293 <= j_4_reg_891;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_293 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        buff_output_img_addr_1_reg_955 <= tmp_i_fu_721_p1;
        i_5_reg_960 <= i_5_fu_727_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond3_reg_872 == 1'd0))) begin
        buff_output_img_load_reg_886 <= buff_output_img_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond1_reg_842 <= exitcond1_fu_537_p2;
        exitcond1_reg_842_pp0_iter1_reg <= exitcond1_reg_842;
        indvar_reg_305_pp0_iter1_reg <= indvar_reg_305;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        exitcond2_reg_896 <= exitcond2_fu_631_p2;
        exitcond2_reg_896_pp2_iter1_reg <= exitcond2_reg_896;
        indvar1_reg_328_pp2_iter1_reg <= indvar1_reg_328;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond3_reg_872 <= exitcond3_fu_609_p2;
        exitcond3_reg_872_pp1_iter1_reg <= exitcond3_reg_872;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        exitcond4_reg_926 <= exitcond4_fu_669_p2;
        exitcond4_reg_926_pp3_iter1_reg <= exitcond4_reg_926;
        indvar5_reg_340_pp3_iter1_reg <= indvar5_reg_340;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten_fu_423_p2 == 1'd0))) begin
        exitcond_reg_793 <= exitcond_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
        i_mid2_reg_825 <= i_mid2_fu_518_p3;
        j_mid2_reg_803 <= j_mid2_fu_447_p3;
        p_shl1_mid2_reg_815[4 : 3] <= p_shl1_mid2_fu_494_p3[4 : 3];
        tmp_32_mid2_reg_820[4 : 3] <= tmp_32_mid2_fu_512_p3[4 : 3];
tmp_32_mid2_reg_820[7 : 6] <= tmp_32_mid2_fu_512_p3[7 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond2_reg_896 == 1'd0))) begin
        img_port_addr_1_read_reg_905 <= img_port_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        img_port_addr_2_reg_866[16 : 0] <= p_sum6_cast_fu_600_p1[16 : 0];
        sum_reg_861 <= sum_fu_594_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond4_reg_926 == 1'd0))) begin
        img_port_addr_3_read_reg_935 <= img_port_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        img_port_addr_3_reg_910[16 : 0] <= p_sum_cast_fu_652_p1[16 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_842 == 1'd0))) begin
        img_port_addr_read_reg_851 <= img_port_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3) & (tmp_mid2_fu_460_p3 == 1'd1))) begin
        img_port_addr_reg_830[14 : 0] <= tmp_31_mid2_cast_fu_482_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_next_reg_788 <= indvar_flatten_next_fu_429_p2;
        p_shl1_reg_773[4 : 3] <= p_shl1_fu_403_p3[4 : 3];
        tmp_30_reg_763[16 : 0] <= tmp_30_fu_395_p1[16 : 0];
        tmp_31_reg_779[4 : 3] <= tmp_31_fu_411_p5[4 : 3];
tmp_31_reg_779[7 : 6] <= tmp_31_fu_411_p5[7 : 6];
        tmp_41_reg_768 <= tmp_41_fu_399_p1;
        tmp_reg_758 <= tmp_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar_next1_reg_900 <= indvar_next1_fu_637_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        indvar_next3_reg_930 <= indvar_next3_fu_675_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_next_reg_846 <= indvar_next_fu_543_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        j_4_reg_891 <= j_4_fu_626_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_374 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        sum2_reg_940 <= sum2_fu_707_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        tmp_49_cast2_reg_916[3 : 0] <= tmp_49_cast2_fu_661_p1[3 : 0];
        tmp_49_cast_reg_921[3 : 0] <= tmp_49_cast_fu_665_p1[3 : 0];
    end
end

always @ (*) begin
    if ((exitcond1_fu_537_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond3_fu_609_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state17 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state17 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond2_fu_631_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state31 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state31 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond4_fu_669_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state42 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state42 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_fu_423_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0) & (exitcond2_reg_896 == 1'd0))) begin
        ap_phi_mux_indvar1_phi_fu_332_p4 = indvar_next1_reg_900;
    end else begin
        ap_phi_mux_indvar1_phi_fu_332_p4 = indvar1_reg_328;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0) & (exitcond4_reg_926 == 1'd0))) begin
        ap_phi_mux_indvar5_phi_fu_344_p4 = indvar_next3_reg_930;
    end else begin
        ap_phi_mux_indvar5_phi_fu_344_p4 = indvar5_reg_340;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_842 == 1'd0))) begin
        ap_phi_mux_indvar_phi_fu_309_p4 = indvar_next_reg_846;
    end else begin
        ap_phi_mux_indvar_phi_fu_309_p4 = indvar_reg_305;
    end
end

always @ (*) begin
    if (((exitcond_flatten_fu_423_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_img_port_ARREADY == 1'b0)) begin
        ap_sig_ioackin_img_port_ARREADY = img_port_ARREADY;
    end else begin
        ap_sig_ioackin_img_port_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_img_port_AWREADY == 1'b0)) begin
        ap_sig_ioackin_img_port_AWREADY = img_port_AWREADY;
    end else begin
        ap_sig_ioackin_img_port_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_img_port_WREADY == 1'b0)) begin
        ap_sig_ioackin_img_port_WREADY = img_port_WREADY;
    end else begin
        ap_sig_ioackin_img_port_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        bias_address0 = tmp_40_fu_716_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        bias_address0 = tmp_35_fu_562_p1;
    end else begin
        bias_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state14))) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        buff_input_img_address1 = indvar3_fu_643_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buff_input_img_address1 = indvar2_fu_549_p1;
    end else begin
        buff_input_img_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state16))) begin
        buff_input_img_ce0 = grp_CONV_fu_363_input_img_ce0;
    end else begin
        buff_input_img_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        buff_input_img_ce1 = 1'b1;
    end else begin
        buff_input_img_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        buff_input_img_d1 = img_port_addr_1_read_reg_905;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buff_input_img_d1 = img_port_addr_read_reg_851;
    end else begin
        buff_input_img_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1) & (exitcond2_reg_896_pp2_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond1_reg_842_pp0_iter1_reg == 1'd0)))) begin
        buff_input_img_we1 = 1'b1;
    end else begin
        buff_input_img_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        buff_output_img_address0 = buff_output_img_addr_1_reg_955;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        buff_output_img_address0 = tmp_i_fu_721_p1;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        buff_output_img_address0 = indvar6_fu_621_p1;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state16))) begin
        buff_output_img_address0 = grp_CONV_fu_363_output_img_address0;
    end else begin
        buff_output_img_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        buff_output_img_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state16))) begin
        buff_output_img_ce0 = grp_CONV_fu_363_output_img_ce0;
    end else begin
        buff_output_img_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        buff_output_img_d0 = tmp_1_i_fu_733_p2;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state16))) begin
        buff_output_img_d0 = grp_CONV_fu_363_output_img_d0;
    end else begin
        buff_output_img_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        buff_output_img_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state16))) begin
        buff_output_img_we0 = grp_CONV_fu_363_output_img_we0;
    end else begin
        buff_output_img_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        buff_result_img_address0 = tmp_i_fu_721_p1;
    end else if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0))) begin
        buff_result_img_address0 = indvar7_fu_681_p1;
    end else begin
        buff_result_img_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
        buff_result_img_ce0 = 1'b1;
    end else begin
        buff_result_img_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1) & (exitcond4_reg_926_pp3_iter1_reg == 1'd0))) begin
        buff_result_img_we0 = 1'b1;
    end else begin
        buff_result_img_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_CONV_fu_363_kernel_offset = sum2_reg_940;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_CONV_fu_363_kernel_offset = sum_reg_861;
    end else begin
        grp_CONV_fu_363_kernel_offset = 'bx;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_img_port_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state35)) begin
            img_port_ARADDR = img_port_addr_3_reg_910;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            img_port_ARADDR = img_port_addr_reg_830;
        end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_mid2_fu_460_p3 == 1'd0))) begin
            img_port_ARADDR = tmp_30_reg_763;
        end else begin
            img_port_ARADDR = 'bx;
        end
    end else begin
        img_port_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_img_port_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state35))) begin
        img_port_ARLEN = 32'd9604;
    end else if ((((ap_reg_ioackin_img_port_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4)) | ((ap_reg_ioackin_img_port_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3) & (tmp_mid2_fu_460_p3 == 1'd0)))) begin
        img_port_ARLEN = 32'd10000;
    end else begin
        img_port_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_img_port_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4)) | ((ap_reg_ioackin_img_port_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state35)) | ((ap_reg_ioackin_img_port_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3) & (tmp_mid2_fu_460_p3 == 1'd0)))) begin
        img_port_ARVALID = 1'b1;
    end else begin
        img_port_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((grp_CONV_fu_363_ap_done == 1'b1) & (ap_reg_ioackin_img_port_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state16))) begin
        img_port_AWVALID = 1'b1;
    end else begin
        img_port_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((img_port_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        img_port_BREADY = 1'b1;
    end else begin
        img_port_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_842 == 1'd0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond4_reg_926 == 1'd0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond2_reg_896 == 1'd0)))) begin
        img_port_RREADY = 1'b1;
    end else begin
        img_port_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_01001) & (ap_reg_ioackin_img_port_WREADY == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (exitcond3_reg_872_pp1_iter1_reg == 1'd0))) begin
        img_port_WVALID = 1'b1;
    end else begin
        img_port_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state35) | ((1'b1 == ap_CS_fsm_state3) & (tmp_mid2_fu_460_p3 == 1'd0)))) begin
        img_port_blk_n_AR = m_axi_img_port_ARREADY;
    end else begin
        img_port_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        img_port_blk_n_AW = m_axi_img_port_AWREADY;
    end else begin
        img_port_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        img_port_blk_n_B = m_axi_img_port_BVALID;
    end else begin
        img_port_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_842 == 1'd0)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0) & (exitcond4_reg_926 == 1'd0)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0) & (exitcond2_reg_896 == 1'd0)))) begin
        img_port_blk_n_R = m_axi_img_port_RVALID;
    end else begin
        img_port_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (exitcond3_reg_872_pp1_iter1_reg == 1'd0))) begin
        img_port_blk_n_W = m_axi_img_port_WREADY;
    end else begin
        img_port_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state16))) begin
        kernel_ce0 = grp_CONV_fu_363_kernel_ce0;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_flatten_fu_423_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3) & (tmp_mid2_fu_460_p3 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3) & (tmp_mid2_fu_460_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((ap_sig_ioackin_img_port_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond1_fu_537_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond1_fu_537_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if ((~((grp_CONV_fu_363_ap_done == 1'b0) | (ap_sig_ioackin_img_port_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (exitcond3_fu_609_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (exitcond3_fu_609_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((img_port_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (exitcond2_fu_631_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (exitcond2_fu_631_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((ap_sig_ioackin_img_port_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (exitcond4_fu_669_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (exitcond4_fu_669_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((grp_CONV_fu_363_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd40];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((img_port_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond1_reg_842 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((img_port_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond1_reg_842 == 1'd0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b1 == ap_block_state19_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b1 == ap_block_state19_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((img_port_RVALID == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (exitcond2_reg_896 == 1'd0));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((img_port_RVALID == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (exitcond2_reg_896 == 1'd0));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((img_port_RVALID == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond4_reg_926 == 1'd0));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((img_port_RVALID == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond4_reg_926 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage0_iter1 = ((img_port_RVALID == 1'b0) & (exitcond1_reg_842 == 1'd0));
end

assign ap_block_state13_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_io = ((ap_sig_ioackin_img_port_WREADY == 1'b0) & (exitcond3_reg_872_pp1_iter1_reg == 1'd0));
end

assign ap_block_state19_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state32_pp2_stage0_iter1 = ((img_port_RVALID == 1'b0) & (exitcond2_reg_896 == 1'd0));
end

assign ap_block_state33_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((ap_sig_ioackin_img_port_ARREADY == 1'b0) & (tmp_mid2_fu_460_p3 == 1'd0));
end

assign ap_block_state42_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state43_pp3_stage0_iter1 = ((img_port_RVALID == 1'b0) & (exitcond4_reg_926 == 1'd0));
end

assign ap_block_state44_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_537_p2 = ((ap_phi_mux_indvar_phi_fu_309_p4 == 14'd10000) ? 1'b1 : 1'b0);

assign exitcond2_fu_631_p2 = ((ap_phi_mux_indvar1_phi_fu_332_p4 == 14'd10000) ? 1'b1 : 1'b0);

assign exitcond3_fu_609_p2 = ((indvar4_reg_317 == 14'd9604) ? 1'b1 : 1'b0);

assign exitcond4_fu_669_p2 = ((ap_phi_mux_indvar5_phi_fu_344_p4 == 14'd9604) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_423_p2 = ((indvar_flatten_reg_270 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond_fu_435_p2 = ((j_reg_293 == 4'd8) ? 1'b1 : 1'b0);

assign grp_CONV_fu_363_ap_start = grp_CONV_fu_363_ap_start_reg;

assign grp_fu_740_p0 = 17'd9604;

assign grp_fu_740_p1 = grp_fu_740_p10;

assign grp_fu_740_p10 = j_mid2_reg_803;

assign grp_fu_740_p2 = 17'd30000;

assign grp_fu_749_p0 = grp_fu_749_p00;

assign grp_fu_749_p00 = j_reg_293;

assign grp_fu_749_p1 = 17'd9604;

assign grp_fu_749_p2 = 17'd30000;

assign i_4_fu_441_p2 = (i_reg_281 + 2'd1);

assign i_5_fu_727_p2 = ($signed(i_i_reg_352) + $signed(8'd1));

assign i_mid2_fu_518_p3 = ((exitcond_reg_793[0:0] === 1'b1) ? i_4_fu_441_p2 : i_reg_281);

assign indvar2_fu_549_p1 = indvar_reg_305_pp0_iter1_reg;

assign indvar3_fu_643_p1 = indvar1_reg_328_pp2_iter1_reg;

assign indvar6_fu_621_p1 = indvar4_reg_317;

assign indvar7_fu_681_p1 = indvar5_reg_340_pp3_iter1_reg;

assign indvar_flatten_next_fu_429_p2 = (5'd1 + indvar_flatten_reg_270);

assign indvar_next1_fu_637_p2 = (ap_phi_mux_indvar1_phi_fu_332_p4 + 14'd1);

assign indvar_next2_fu_615_p2 = (indvar4_reg_317 + 14'd1);

assign indvar_next3_fu_675_p2 = (ap_phi_mux_indvar5_phi_fu_344_p4 + 14'd1);

assign indvar_next_fu_543_p2 = (ap_phi_mux_indvar_phi_fu_309_p4 + 14'd1);

assign j_4_fu_626_p2 = (j_mid2_reg_803 + 4'd1);

assign j_mid2_fu_447_p3 = ((exitcond_reg_793[0:0] === 1'b1) ? 4'd0 : j_reg_293);

assign kernel_address0 = grp_CONV_fu_363_kernel_address0;

assign p_shl1_fu_403_p3 = {{i_reg_281}, {3'd0}};

assign p_shl1_mid1_fu_486_p3 = {{i_4_fu_441_p2}, {3'd0}};

assign p_shl1_mid2_fu_494_p3 = ((exitcond_reg_793[0:0] === 1'b1) ? p_shl1_mid1_fu_486_p3 : p_shl1_reg_773);

assign p_shl2_fu_576_p3 = {{tmp_42_fu_573_p1}, {3'd0}};

assign p_shl3_fu_690_p3 = {{tmp_43_fu_686_p1}, {3'd0}};

assign p_sum6_cast_fu_600_p1 = grp_fu_740_p3;

assign p_sum_cast_fu_652_p1 = grp_fu_749_p3;

assign sum2_fu_707_p2 = (tmp_53_cast_fu_703_p1 + tmp_31_reg_779);

assign sum_fu_594_p2 = (tmp_44_cast_fu_590_p1 + tmp_32_mid2_reg_820);

assign tmp_1_i_fu_733_p2 = (buff_output_img_q0 + buff_result_img_q0);

assign tmp_30_fu_395_p1 = tmp_s_fu_389_p2;

assign tmp_30_mid1_fu_470_p0 = tmp_30_mid1_fu_470_p00;

assign tmp_30_mid1_fu_470_p00 = i_4_fu_441_p2;

assign tmp_30_mid1_fu_470_p2 = (tmp_30_mid1_fu_470_p0 * $signed('h2710));

assign tmp_31_fu_411_p5 = {{{{i_reg_281}, {1'd0}}, {i_reg_281}}, {3'd0}};

assign tmp_31_mid2_cast_fu_482_p1 = tmp_31_mid2_fu_476_p3;

assign tmp_31_mid2_fu_476_p3 = ((exitcond_reg_793[0:0] === 1'b1) ? tmp_30_mid1_fu_470_p2 : tmp_41_reg_768);

assign tmp_32_mid1_fu_500_p5 = {{{{i_4_fu_441_p2}, {1'd0}}, {i_4_fu_441_p2}}, {3'd0}};

assign tmp_32_mid2_fu_512_p3 = ((exitcond_reg_793[0:0] === 1'b1) ? tmp_32_mid1_fu_500_p5 : tmp_31_reg_779);

assign tmp_33_fu_584_p2 = (tmp_42_cast_fu_570_p1 + p_shl2_fu_576_p3);

assign tmp_34_fu_557_p2 = (tmp_42_cast6_fu_554_p1 + p_shl1_mid2_reg_815);

assign tmp_35_fu_562_p1 = tmp_34_fu_557_p2;

assign tmp_38_fu_698_p2 = (tmp_49_cast_reg_921 + p_shl3_fu_690_p3);

assign tmp_39_fu_712_p2 = (tmp_49_cast2_reg_916 + p_shl1_reg_773);

assign tmp_40_fu_716_p1 = tmp_39_fu_712_p2;

assign tmp_41_fu_399_p1 = tmp_s_fu_389_p2[14:0];

assign tmp_42_cast6_fu_554_p1 = j_mid2_reg_803;

assign tmp_42_cast_fu_570_p1 = j_mid2_reg_803;

assign tmp_42_fu_573_p1 = j_mid2_reg_803[2:0];

assign tmp_43_fu_686_p1 = j_reg_293[2:0];

assign tmp_44_cast_fu_590_p1 = tmp_33_fu_584_p2;

assign tmp_49_cast2_fu_661_p1 = j_reg_293;

assign tmp_49_cast_fu_665_p1 = j_reg_293;

assign tmp_53_cast_fu_703_p1 = tmp_38_fu_698_p2;

assign tmp_fu_379_p2 = ((i_reg_281 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_i_fu_721_p1 = i_i_reg_352;

assign tmp_mid1_fu_454_p2 = ((i_4_fu_441_p2 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_mid2_fu_460_p3 = ((exitcond_reg_793[0:0] === 1'b1) ? tmp_mid1_fu_454_p2 : tmp_reg_758);

assign tmp_s_fu_389_p1 = tmp_s_fu_389_p10;

assign tmp_s_fu_389_p10 = i_reg_281;

assign tmp_s_fu_389_p2 = (17'd10000 * tmp_s_fu_389_p1);

always @ (posedge ap_clk) begin
    tmp_30_reg_763[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    p_shl1_reg_773[2:0] <= 3'b000;
    tmp_31_reg_779[2:0] <= 3'b000;
    tmp_31_reg_779[5] <= 1'b0;
    p_shl1_mid2_reg_815[2:0] <= 3'b000;
    tmp_32_mid2_reg_820[2:0] <= 3'b000;
    tmp_32_mid2_reg_820[5] <= 1'b0;
    img_port_addr_reg_830[31:15] <= 17'b00000000000000000;
    img_port_addr_2_reg_866[31:17] <= 15'b000000000000000;
    img_port_addr_3_reg_910[31:17] <= 15'b000000000000000;
    tmp_49_cast2_reg_916[4] <= 1'b0;
    tmp_49_cast_reg_921[5:4] <= 2'b00;
end

endmodule //CNN
