// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module CONV (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_img_address0,
        input_img_ce0,
        input_img_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        kernel_offset,
        bias,
        output_img_address0,
        output_img_ce0,
        output_img_we0,
        output_img_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_pp0_stage0 = 9'd2;
parameter    ap_ST_fsm_state5 = 9'd4;
parameter    ap_ST_fsm_pp1_stage0 = 9'd8;
parameter    ap_ST_fsm_state8 = 9'd16;
parameter    ap_ST_fsm_pp2_stage0 = 9'd32;
parameter    ap_ST_fsm_state14 = 9'd64;
parameter    ap_ST_fsm_pp3_stage0 = 9'd128;
parameter    ap_ST_fsm_state18 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_img_address0;
output   input_img_ce0;
input  [7:0] input_img_q0;
output  [4:0] kernel_address0;
output   kernel_ce0;
input  [7:0] kernel_q0;
input  [7:0] kernel_offset;
input  [7:0] bias;
output  [13:0] output_img_address0;
output   output_img_ce0;
output   output_img_we0;
output  [7:0] output_img_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_img_ce0;
reg kernel_ce0;
reg output_img_ce0;
reg output_img_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [13:0] indvar_flatten_reg_228;
reg   [6:0] i_reg_239;
reg   [6:0] j_reg_250;
reg   [3:0] indvar_flatten6_reg_261;
reg   [1:0] m_reg_272;
reg   [1:0] n_reg_283;
reg   [16:0] indvar_flatten1_reg_294;
reg   [15:0] indvar_flatten2_reg_305;
reg   [13:0] indvar_flatten3_reg_316;
reg   [6:0] j_1_reg_327;
reg   [1:0] m_1_reg_338;
reg   [1:0] n_1_reg_349;
reg   [6:0] i_1_reg_360;
reg   [13:0] k_reg_371;
wire   [0:0] exitcond_flatten_fu_382_p2;
reg   [0:0] exitcond_flatten_reg_1162;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_1162_pp0_iter1_reg;
wire   [13:0] indvar_flatten_next_fu_388_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [6:0] j_mid2_fu_406_p3;
reg   [6:0] j_mid2_reg_1171;
wire   [6:0] tmp_3_mid2_v_v_fu_414_p3;
reg   [6:0] tmp_3_mid2_v_v_reg_1176;
wire   [6:0] j_2_fu_422_p2;
wire   [13:0] grp_fu_1134_p3;
reg   [13:0] tmp_4_reg_1193;
reg    ap_enable_reg_pp0_iter1;
wire   [5:0] tmp_fu_445_p1;
reg   [5:0] tmp_reg_1198;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_flatten8_fu_470_p2;
reg   [0:0] exitcond_flatten8_reg_1203;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state6_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [3:0] indvar_flatten_next7_fu_476_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [1:0] tmp_7_mid2_v_fu_532_p3;
reg   [1:0] tmp_7_mid2_v_reg_1212;
wire   [4:0] tmp_11_cast_fu_540_p1;
reg   [4:0] tmp_11_cast_reg_1219;
wire   [1:0] n_2_fu_564_p2;
wire   [0:0] exitcond_flatten3_fu_600_p2;
reg   [0:0] exitcond_flatten3_reg_1234;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state9_pp2_stage0_iter0;
wire    ap_block_state10_pp2_stage0_iter1;
wire    ap_block_state11_pp2_stage0_iter2;
wire    ap_block_state12_pp2_stage0_iter3;
wire    ap_block_state13_pp2_stage0_iter4;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] exitcond_flatten3_reg_1234_pp2_iter1_reg;
reg   [0:0] exitcond_flatten3_reg_1234_pp2_iter2_reg;
reg   [0:0] exitcond_flatten3_reg_1234_pp2_iter3_reg;
wire   [16:0] indvar_flatten_next3_fu_606_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] exitcond_flatten1_fu_612_p2;
reg   [0:0] exitcond_flatten1_reg_1243;
reg   [0:0] exitcond_flatten1_reg_1243_pp2_iter1_reg;
wire   [0:0] exitcond_flatten15_m_fu_642_p2;
reg   [0:0] exitcond_flatten15_m_reg_1252;
reg   [0:0] exitcond_flatten15_m_reg_1252_pp2_iter1_reg;
wire   [0:0] tmp_32_fu_648_p2;
reg   [0:0] tmp_32_reg_1260;
wire   [0:0] exitcond1_mid1_fu_666_p2;
reg   [0:0] exitcond1_mid1_reg_1266;
wire   [6:0] j_1_mid2_fu_684_p3;
reg   [6:0] j_1_mid2_reg_1273;
reg   [6:0] j_1_mid2_reg_1273_pp2_iter1_reg;
wire   [6:0] j_3_fu_692_p2;
wire   [13:0] indvar_flatten_next1_fu_704_p3;
wire   [15:0] indvar_flatten_next2_fu_718_p3;
wire   [5:0] tmp_16_fu_760_p2;
reg   [5:0] tmp_16_reg_1294;
wire   [0:0] tmp_18_fu_772_p2;
reg   [0:0] tmp_18_reg_1299;
wire   [1:0] m_3_fu_794_p2;
reg   [1:0] m_3_reg_1304;
wire   [1:0] tmp_8_cast_mid2_fu_807_p3;
reg   [1:0] tmp_8_cast_mid2_reg_1311;
reg    ap_enable_reg_pp2_iter1;
wire   [1:0] n_3_fu_829_p2;
reg   [1:0] n_3_reg_1319;
wire   [1:0] tmp_17_cast_mid2_fu_842_p3;
reg   [1:0] tmp_17_cast_mid2_reg_1325;
wire   [6:0] tmp_20_mid2_fu_879_p3;
reg   [6:0] tmp_20_mid2_reg_1331;
wire   [6:0] i_1_mid2_fu_899_p3;
wire   [13:0] tmp_27_fu_909_p2;
reg   [13:0] tmp_27_reg_1341;
reg   [13:0] tmp_27_reg_1341_pp2_iter2_reg;
wire   [0:0] tmp_18_mid2_fu_1010_p3;
reg   [0:0] tmp_18_mid2_reg_1351;
reg   [0:0] tmp_18_mid2_reg_1351_pp2_iter3_reg;
reg   [7:0] temp_reg_1361;
reg   [13:0] OBRAM_addr_1_reg_1367;
wire   [6:0] tmp_21_fu_1073_p1;
reg   [6:0] tmp_21_reg_1373;
wire    ap_CS_fsm_state14;
wire   [0:0] exitcond_fu_1076_p2;
reg   [0:0] exitcond_reg_1378;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state15_pp3_stage0_iter0;
wire    ap_block_state16_pp3_stage0_iter1;
wire    ap_block_state17_pp3_stage0_iter2;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] exitcond_reg_1378_pp3_iter1_reg;
wire   [13:0] k_1_fu_1082_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [63:0] tmp_13_fu_1088_p1;
reg   [63:0] tmp_13_reg_1387;
reg   [63:0] tmp_13_reg_1387_pp3_iter1_reg;
wire   [6:0] x_assign_1_fu_1113_p3;
reg   [6:0] x_assign_1_reg_1397;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state8;
wire    ap_block_pp2_stage0_subdone;
reg    ap_enable_reg_pp2_iter2;
reg    ap_condition_pp2_exit_iter1_state10;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state15;
reg    ap_enable_reg_pp3_iter1;
reg    ap_enable_reg_pp3_iter2;
reg   [13:0] IBRAM_address0;
reg    IBRAM_ce0;
reg    IBRAM_we0;
wire   [7:0] IBRAM_q0;
reg   [13:0] OBRAM_address0;
reg    OBRAM_ce0;
wire   [7:0] OBRAM_q0;
reg    OBRAM_ce1;
reg    OBRAM_we1;
wire   [7:0] OBRAM_d1;
reg   [3:0] WBRAM_address0;
reg    WBRAM_ce0;
reg    WBRAM_we0;
wire   [7:0] WBRAM_q0;
reg   [6:0] ap_phi_mux_i_phi_fu_243_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_m_phi_fu_276_p4;
wire    ap_block_pp1_stage0;
reg   [1:0] ap_phi_mux_m_1_phi_fu_342_p4;
wire    ap_block_pp2_stage0;
reg   [1:0] ap_phi_mux_n_1_phi_fu_353_p4;
wire   [63:0] tmp_1_fu_437_p1;
wire   [63:0] tmp_4_cast_fu_441_p1;
wire   [63:0] sum_cast_fu_559_p1;
wire  signed [63:0] tmp_30_cast_fu_595_p1;
wire   [63:0] tmp_19_cast_mid2_v_fu_992_p3;
wire   [63:0] tmp_43_cast_fu_1029_p1;
wire   [63:0] tmp_28_fu_1057_p1;
wire    ap_block_pp3_stage0;
wire   [0:0] exitcond1_fu_400_p2;
wire   [6:0] i_2_fu_394_p2;
wire   [13:0] grp_fu_1125_p3;
wire   [3:0] p_shl_fu_452_p3;
wire   [4:0] p_shl_cast_fu_460_p1;
wire   [4:0] tmp_5_cast7_fu_448_p1;
wire   [0:0] exitcond2_fu_488_p2;
wire   [1:0] m_2_fu_482_p2;
wire   [3:0] p_shl_mid1_fu_506_p3;
wire   [4:0] p_shl_cast_mid1_fu_514_p1;
wire   [4:0] tmp_5_cast7_mid1_fu_502_p1;
wire   [4:0] tmp_6_mid1_fu_518_p2;
wire   [4:0] tmp_6_fu_464_p2;
wire   [1:0] n_mid2_fu_494_p3;
wire   [4:0] tmp_6_mid2_fu_524_p3;
wire   [4:0] tmp_8_fu_544_p2;
wire  signed [5:0] tmp_13_cast_fu_550_p1;
wire   [5:0] sum_fu_554_p2;
wire   [3:0] tmp_7_fu_573_p3;
wire   [4:0] p_shl1_cast_fu_580_p1;
wire   [4:0] tmp_7_mid2_cast_fu_570_p1;
wire   [4:0] tmp_2_fu_584_p2;
wire   [4:0] tmp_10_fu_590_p2;
wire   [0:0] exitcond3_fu_624_p2;
wire   [0:0] not_exitcond_flatten_fu_618_p2;
wire   [0:0] exitcond_flatten2_fu_636_p2;
wire   [0:0] exitcond_flatten15_n_fu_654_p2;
wire   [0:0] exitcond1_mid_fu_630_p2;
wire   [0:0] not_exitcond_flatten_1_fu_660_p2;
wire   [0:0] tmp_34_fu_672_p2;
wire   [0:0] tmp_35_fu_678_p2;
wire   [13:0] indvar_flatten13_op_fu_698_p2;
wire   [15:0] indvar_flatten34_op_fu_712_p2;
wire   [3:0] tmp_11_fu_734_p3;
wire   [4:0] p_shl2_cast_fu_742_p1;
wire   [4:0] tmp_8_cast1_fu_730_p1;
wire   [4:0] tmp_14_fu_746_p2;
wire  signed [5:0] tmp_32_cast_fu_752_p1;
wire   [5:0] tmp_16_cast_fu_756_p1;
wire   [1:0] tmp_17_fu_766_p2;
wire   [6:0] tmp_8_cast_fu_726_p1;
wire   [6:0] tmp_20_fu_788_p0;
wire   [6:0] tmp_8_mid1_cast1_fu_818_p1;
wire   [6:0] tmp_19_fu_782_p2;
wire   [1:0] n_1_mid_fu_800_p3;
wire   [6:0] tmp_8_cast_mid2_cast_fu_814_p1;
wire   [6:0] tmp_20_mid_fu_822_p3;
wire   [13:0] tmp_20_fu_788_p2;
wire   [6:0] i_1_mid_fu_835_p3;
wire   [6:0] i_3_fu_863_p2;
wire   [6:0] tmp_19_mid1_fu_873_p2;
wire   [6:0] tmp_20_mid4_fu_849_p3;
wire   [6:0] tmp_21_mid1_fu_886_p0;
wire   [13:0] tmp_21_mid1_fu_886_p2;
wire   [13:0] tmp_21_mid_fu_856_p3;
wire   [13:0] tmp_26_cast2_fu_906_p1;
wire   [13:0] tmp_21_mid2_fu_892_p3;
wire   [3:0] tmp_24_fu_918_p3;
wire   [4:0] p_shl3_cast_fu_925_p1;
wire   [4:0] tmp_8_mid1_cast_fu_915_p1;
wire   [4:0] tmp_26_fu_929_p2;
wire   [3:0] tmp_30_fu_942_p3;
wire   [63:0] p_shl4_fu_949_p1;
wire   [63:0] tmp_8_mid2_cast_fu_939_p1;
wire  signed [5:0] tmp_35_cast_fu_935_p1;
wire   [5:0] tmp_19_cast_mid255_v_fu_959_p3;
wire   [0:0] tmp_18_mid_fu_969_p2;
wire   [63:0] tmp_31_fu_953_p2;
wire   [63:0] tmp_16_mid1_fu_983_p1;
wire   [63:0] tmp_33_fu_986_p2;
wire  signed [63:0] tmp_19_cast_mid255_v_1_fu_965_p1;
wire   [1:0] tmp_17_mid1_fu_1000_p2;
wire   [0:0] tmp_18_mid1_fu_1004_p2;
wire   [0:0] tmp_18_mid3_fu_974_p3;
wire   [6:0] tmp_17_cast_mid2_cas_fu_980_p1;
wire   [6:0] tmp_23_fu_1020_p2;
wire   [13:0] grp_fu_1142_p3;
wire  signed [7:0] tmp_25_fu_1041_p0;
wire  signed [7:0] tmp_25_fu_1041_p1;
wire   [15:0] tmp_25_fu_1041_p2;
wire   [7:0] tmp_29_fu_1061_p2;
wire   [6:0] tmp_38_fu_1093_p1;
wire   [7:0] x_assign_fu_1097_p2;
wire   [0:0] tmp_15_fu_1107_p2;
wire   [6:0] x_assign_cast_fu_1102_p2;
wire   [6:0] grp_fu_1125_p0;
wire   [7:0] grp_fu_1125_p1;
wire   [6:0] grp_fu_1125_p2;
wire   [13:0] tmp_9_cast_fu_434_p1;
wire   [6:0] grp_fu_1134_p0;
wire   [7:0] grp_fu_1134_p1;
wire   [6:0] grp_fu_1134_p2;
wire   [6:0] grp_fu_1142_p0;
wire   [7:0] grp_fu_1142_p1;
wire   [6:0] grp_fu_1142_p2;
wire    ap_CS_fsm_state18;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire   [13:0] grp_fu_1125_p00;
wire   [13:0] grp_fu_1134_p00;
wire   [13:0] grp_fu_1142_p00;
wire   [13:0] grp_fu_1142_p20;
wire   [13:0] tmp_20_fu_788_p00;
wire   [13:0] tmp_21_mid1_fu_886_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
end

CONV_IBRAM #(
    .DataWidth( 8 ),
    .AddressRange( 10000 ),
    .AddressWidth( 14 ))
IBRAM_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(IBRAM_address0),
    .ce0(IBRAM_ce0),
    .we0(IBRAM_we0),
    .d0(input_img_q0),
    .q0(IBRAM_q0)
);

CONV_OBRAM #(
    .DataWidth( 8 ),
    .AddressRange( 9604 ),
    .AddressWidth( 14 ))
OBRAM_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(OBRAM_address0),
    .ce0(OBRAM_ce0),
    .q0(OBRAM_q0),
    .address1(OBRAM_addr_1_reg_1367),
    .ce1(OBRAM_ce1),
    .we1(OBRAM_we1),
    .d1(OBRAM_d1)
);

CONV_WBRAM #(
    .DataWidth( 8 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
WBRAM_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(WBRAM_address0),
    .ce0(WBRAM_ce0),
    .we0(WBRAM_we0),
    .d0(kernel_q0),
    .q0(WBRAM_q0)
);

CNN_mac_muladd_7nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 14 ))
CNN_mac_muladd_7nbkb_U1(
    .din0(grp_fu_1125_p0),
    .din1(grp_fu_1125_p1),
    .din2(grp_fu_1125_p2),
    .dout(grp_fu_1125_p3)
);

CNN_mac_muladd_7nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 14 ))
CNN_mac_muladd_7nbkb_U2(
    .din0(grp_fu_1134_p0),
    .din1(grp_fu_1134_p1),
    .din2(grp_fu_1134_p2),
    .dout(grp_fu_1134_p3)
);

CNN_mac_muladd_7nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 14 ))
CNN_mac_muladd_7nbkb_U3(
    .din0(grp_fu_1142_p0),
    .din1(grp_fu_1142_p1),
    .din2(grp_fu_1142_p2),
    .dout(grp_fu_1142_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state6))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond_flatten3_fu_600_p2 == 1'd1))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter1_state10)) begin
                ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp2_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state15) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state15)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state15);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_1_reg_360 <= 7'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten3_reg_1234 == 1'd0))) begin
        i_1_reg_360 <= i_1_mid2_fu_899_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1162 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_239 <= tmp_3_mid2_v_v_reg_1176;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_239 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_flatten1_reg_294 <= 17'd0;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten3_fu_600_p2 == 1'd0))) begin
        indvar_flatten1_reg_294 <= indvar_flatten_next3_fu_606_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_flatten2_reg_305 <= 16'd0;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten3_fu_600_p2 == 1'd0))) begin
        indvar_flatten2_reg_305 <= indvar_flatten_next2_fu_718_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_flatten3_reg_316 <= 14'd0;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten3_fu_600_p2 == 1'd0))) begin
        indvar_flatten3_reg_316 <= indvar_flatten_next1_fu_704_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten8_fu_470_p2 == 1'd0))) begin
        indvar_flatten6_reg_261 <= indvar_flatten_next7_fu_476_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten6_reg_261 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_382_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_228 <= indvar_flatten_next_fu_388_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_228 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_1_reg_327 <= 7'd0;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten3_fu_600_p2 == 1'd0))) begin
        j_1_reg_327 <= j_3_fu_692_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_382_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_reg_250 <= j_2_fu_422_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_250 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        k_reg_371 <= 14'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_fu_1076_p2 == 1'd0))) begin
        k_reg_371 <= k_1_fu_1082_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        m_1_reg_338 <= 2'd0;
    end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten3_reg_1234_pp2_iter1_reg == 1'd0))) begin
        m_1_reg_338 <= tmp_8_cast_mid2_reg_1311;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten8_reg_1203 == 1'd0))) begin
        m_reg_272 <= tmp_7_mid2_v_reg_1212;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        m_reg_272 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        n_1_reg_349 <= 2'd0;
    end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten3_reg_1234_pp2_iter1_reg == 1'd0))) begin
        n_1_reg_349 <= tmp_17_cast_mid2_reg_1325;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten8_fu_470_p2 == 1'd0))) begin
        n_reg_283 <= n_2_fu_564_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        n_reg_283 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten3_reg_1234_pp2_iter2_reg == 1'd0))) begin
        OBRAM_addr_1_reg_1367 <= tmp_28_fu_1057_p1;
        temp_reg_1361 <= {{tmp_25_fu_1041_p2[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten3_fu_600_p2 == 1'd0))) begin
        exitcond1_mid1_reg_1266 <= exitcond1_mid1_fu_666_p2;
        exitcond_flatten15_m_reg_1252 <= exitcond_flatten15_m_fu_642_p2;
        exitcond_flatten1_reg_1243 <= exitcond_flatten1_fu_612_p2;
        j_1_mid2_reg_1273 <= j_1_mid2_fu_684_p3;
        tmp_32_reg_1260 <= tmp_32_fu_648_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        exitcond_flatten15_m_reg_1252_pp2_iter1_reg <= exitcond_flatten15_m_reg_1252;
        exitcond_flatten1_reg_1243_pp2_iter1_reg <= exitcond_flatten1_reg_1243;
        exitcond_flatten3_reg_1234 <= exitcond_flatten3_fu_600_p2;
        exitcond_flatten3_reg_1234_pp2_iter1_reg <= exitcond_flatten3_reg_1234;
        j_1_mid2_reg_1273_pp2_iter1_reg <= j_1_mid2_reg_1273;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        exitcond_flatten3_reg_1234_pp2_iter2_reg <= exitcond_flatten3_reg_1234_pp2_iter1_reg;
        exitcond_flatten3_reg_1234_pp2_iter3_reg <= exitcond_flatten3_reg_1234_pp2_iter2_reg;
        tmp_18_mid2_reg_1351_pp2_iter3_reg <= tmp_18_mid2_reg_1351;
        tmp_27_reg_1341_pp2_iter2_reg <= tmp_27_reg_1341;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        exitcond_flatten8_reg_1203 <= exitcond_flatten8_fu_470_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_1162 <= exitcond_flatten_fu_382_p2;
        exitcond_flatten_reg_1162_pp0_iter1_reg <= exitcond_flatten_reg_1162;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        exitcond_reg_1378 <= exitcond_fu_1076_p2;
        exitcond_reg_1378_pp3_iter1_reg <= exitcond_reg_1378;
        tmp_13_reg_1387_pp3_iter1_reg[13 : 0] <= tmp_13_reg_1387[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_382_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_mid2_reg_1171 <= j_mid2_fu_406_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten3_reg_1234 == 1'd0))) begin
        m_3_reg_1304 <= m_3_fu_794_p2;
        n_3_reg_1319 <= n_3_fu_829_p2;
        tmp_20_mid2_reg_1331 <= tmp_20_mid2_fu_879_p3;
        tmp_27_reg_1341 <= tmp_27_fu_909_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten8_fu_470_p2 == 1'd0))) begin
        tmp_11_cast_reg_1219[1 : 0] <= tmp_11_cast_fu_540_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_fu_1076_p2 == 1'd0))) begin
        tmp_13_reg_1387[13 : 0] <= tmp_13_fu_1088_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten15_m_reg_1252 == 1'd0) & (exitcond_flatten1_reg_1243 == 1'd0))) begin
        tmp_16_reg_1294 <= tmp_16_fu_760_p2;
        tmp_18_reg_1299 <= tmp_18_fu_772_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten3_reg_1234 == 1'd0))) begin
        tmp_17_cast_mid2_reg_1325 <= tmp_17_cast_mid2_fu_842_p3;
        tmp_8_cast_mid2_reg_1311 <= tmp_8_cast_mid2_fu_807_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten3_reg_1234_pp2_iter1_reg == 1'd0))) begin
        tmp_18_mid2_reg_1351 <= tmp_18_mid2_fu_1010_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_21_reg_1373 <= tmp_21_fu_1073_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_382_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_3_mid2_v_v_reg_1176 <= tmp_3_mid2_v_v_fu_414_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1162 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        tmp_4_reg_1193 <= grp_fu_1134_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten8_fu_470_p2 == 1'd0))) begin
        tmp_7_mid2_v_reg_1212 <= tmp_7_mid2_v_fu_532_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_reg_1198 <= tmp_fu_445_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_reg_1378 == 1'd0))) begin
        x_assign_1_reg_1397 <= x_assign_1_fu_1113_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        IBRAM_address0 = tmp_43_cast_fu_1029_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IBRAM_address0 = tmp_4_cast_fu_441_p1;
    end else begin
        IBRAM_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        IBRAM_ce0 = 1'b1;
    end else begin
        IBRAM_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond_flatten_reg_1162_pp0_iter1_reg == 1'd0))) begin
        IBRAM_we0 = 1'b1;
    end else begin
        IBRAM_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        OBRAM_address0 = tmp_13_fu_1088_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        OBRAM_address0 = tmp_28_fu_1057_p1;
    end else begin
        OBRAM_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((ap_enable_reg_pp2_iter3 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        OBRAM_ce0 = 1'b1;
    end else begin
        OBRAM_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter4 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        OBRAM_ce1 = 1'b1;
    end else begin
        OBRAM_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter4 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten3_reg_1234_pp2_iter3_reg == 1'd0))) begin
        OBRAM_we1 = 1'b1;
    end else begin
        OBRAM_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        WBRAM_address0 = tmp_19_cast_mid2_v_fu_992_p3;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        WBRAM_address0 = tmp_30_cast_fu_595_p1;
    end else begin
        WBRAM_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        WBRAM_ce0 = 1'b1;
    end else begin
        WBRAM_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten8_reg_1203 == 1'd0))) begin
        WBRAM_we0 = 1'b1;
    end else begin
        WBRAM_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_382_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten8_fu_470_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_condition_pp2_exit_iter1_state10 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter1_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_1076_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state15 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state15 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_1162 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_243_p4 = tmp_3_mid2_v_v_reg_1176;
    end else begin
        ap_phi_mux_i_phi_fu_243_p4 = i_reg_239;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (exitcond_flatten3_reg_1234_pp2_iter1_reg == 1'd0))) begin
        ap_phi_mux_m_1_phi_fu_342_p4 = tmp_8_cast_mid2_reg_1311;
    end else begin
        ap_phi_mux_m_1_phi_fu_342_p4 = m_1_reg_338;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten8_reg_1203 == 1'd0))) begin
        ap_phi_mux_m_phi_fu_276_p4 = tmp_7_mid2_v_reg_1212;
    end else begin
        ap_phi_mux_m_phi_fu_276_p4 = m_reg_272;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (exitcond_flatten3_reg_1234_pp2_iter1_reg == 1'd0))) begin
        ap_phi_mux_n_1_phi_fu_353_p4 = tmp_17_cast_mid2_reg_1325;
    end else begin
        ap_phi_mux_n_1_phi_fu_353_p4 = n_1_reg_349;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        input_img_ce0 = 1'b1;
    end else begin
        input_img_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        output_img_ce0 = 1'b1;
    end else begin
        output_img_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1) & (exitcond_reg_1378_pp3_iter1_reg == 1'd0))) begin
        output_img_we0 = 1'b1;
    end else begin
        output_img_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten_fu_382_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((exitcond_flatten_fu_382_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_flatten8_fu_470_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_flatten8_fu_470_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter2 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b0)) & ~((ap_enable_reg_pp2_iter3 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter3 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter4 == 1'b1)) | ((ap_enable_reg_pp2_iter2 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (exitcond_fu_1076_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (exitcond_fu_1076_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OBRAM_d1 = ((tmp_18_mid2_reg_1351_pp2_iter3_reg[0:0] === 1'b1) ? temp_reg_1361 : tmp_29_fu_1061_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign exitcond1_fu_400_p2 = ((j_reg_250 == 7'd100) ? 1'b1 : 1'b0);

assign exitcond1_mid1_fu_666_p2 = (not_exitcond_flatten_1_fu_660_p2 & exitcond1_mid_fu_630_p2);

assign exitcond1_mid_fu_630_p2 = (not_exitcond_flatten_fu_618_p2 & exitcond3_fu_624_p2);

assign exitcond2_fu_488_p2 = ((n_reg_283 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond3_fu_624_p2 = ((j_1_reg_327 == 7'd98) ? 1'b1 : 1'b0);

assign exitcond_flatten15_m_fu_642_p2 = (not_exitcond_flatten_fu_618_p2 & exitcond_flatten2_fu_636_p2);

assign exitcond_flatten15_n_fu_654_p2 = (exitcond_flatten2_fu_636_p2 ^ 1'd1);

assign exitcond_flatten1_fu_612_p2 = ((indvar_flatten2_reg_305 == 16'd28812) ? 1'b1 : 1'b0);

assign exitcond_flatten2_fu_636_p2 = ((indvar_flatten3_reg_316 == 14'd9604) ? 1'b1 : 1'b0);

assign exitcond_flatten3_fu_600_p2 = ((indvar_flatten1_reg_294 == 17'd86436) ? 1'b1 : 1'b0);

assign exitcond_flatten8_fu_470_p2 = ((indvar_flatten6_reg_261 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_382_p2 = ((indvar_flatten_reg_228 == 14'd10000) ? 1'b1 : 1'b0);

assign exitcond_fu_1076_p2 = ((k_reg_371 == 14'd9604) ? 1'b1 : 1'b0);

assign grp_fu_1125_p0 = grp_fu_1125_p00;

assign grp_fu_1125_p00 = tmp_3_mid2_v_v_reg_1176;

assign grp_fu_1125_p1 = 14'd100;

assign grp_fu_1125_p2 = tmp_9_cast_fu_434_p1;

assign grp_fu_1134_p0 = grp_fu_1134_p00;

assign grp_fu_1134_p00 = tmp_3_mid2_v_v_reg_1176;

assign grp_fu_1134_p1 = 14'd100;

assign grp_fu_1134_p2 = tmp_9_cast_fu_434_p1;

assign grp_fu_1142_p0 = grp_fu_1142_p00;

assign grp_fu_1142_p00 = tmp_20_mid2_reg_1331;

assign grp_fu_1142_p1 = 14'd100;

assign grp_fu_1142_p2 = grp_fu_1142_p20;

assign grp_fu_1142_p20 = tmp_23_fu_1020_p2;

assign i_1_mid2_fu_899_p3 = ((exitcond1_mid1_reg_1266[0:0] === 1'b1) ? i_3_fu_863_p2 : i_1_mid_fu_835_p3);

assign i_1_mid_fu_835_p3 = ((tmp_32_reg_1260[0:0] === 1'b1) ? 7'd0 : i_1_reg_360);

assign i_2_fu_394_p2 = (ap_phi_mux_i_phi_fu_243_p4 + 7'd1);

assign i_3_fu_863_p2 = (i_1_mid_fu_835_p3 + 7'd1);

assign indvar_flatten13_op_fu_698_p2 = (indvar_flatten3_reg_316 + 14'd1);

assign indvar_flatten34_op_fu_712_p2 = (indvar_flatten2_reg_305 + 16'd1);

assign indvar_flatten_next1_fu_704_p3 = ((tmp_32_fu_648_p2[0:0] === 1'b1) ? 14'd1 : indvar_flatten13_op_fu_698_p2);

assign indvar_flatten_next2_fu_718_p3 = ((exitcond_flatten1_fu_612_p2[0:0] === 1'b1) ? 16'd1 : indvar_flatten34_op_fu_712_p2);

assign indvar_flatten_next3_fu_606_p2 = (indvar_flatten1_reg_294 + 17'd1);

assign indvar_flatten_next7_fu_476_p2 = (indvar_flatten6_reg_261 + 4'd1);

assign indvar_flatten_next_fu_388_p2 = (indvar_flatten_reg_228 + 14'd1);

assign input_img_address0 = tmp_1_fu_437_p1;

assign j_1_mid2_fu_684_p3 = ((tmp_35_fu_678_p2[0:0] === 1'b1) ? 7'd0 : j_1_reg_327);

assign j_2_fu_422_p2 = (j_mid2_fu_406_p3 + 7'd1);

assign j_3_fu_692_p2 = (j_1_mid2_fu_684_p3 + 7'd1);

assign j_mid2_fu_406_p3 = ((exitcond1_fu_400_p2[0:0] === 1'b1) ? 7'd0 : j_reg_250);

assign k_1_fu_1082_p2 = (k_reg_371 + 14'd1);

assign kernel_address0 = sum_cast_fu_559_p1;

assign m_2_fu_482_p2 = (ap_phi_mux_m_phi_fu_276_p4 + 2'd1);

assign m_3_fu_794_p2 = (ap_phi_mux_m_1_phi_fu_342_p4 + 2'd1);

assign n_1_mid_fu_800_p3 = ((exitcond_flatten1_reg_1243[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_n_1_phi_fu_353_p4);

assign n_2_fu_564_p2 = (n_mid2_fu_494_p3 + 2'd1);

assign n_3_fu_829_p2 = (n_1_mid_fu_800_p3 + 2'd1);

assign n_mid2_fu_494_p3 = ((exitcond2_fu_488_p2[0:0] === 1'b1) ? 2'd0 : n_reg_283);

assign not_exitcond_flatten_1_fu_660_p2 = (exitcond_flatten1_fu_612_p2 | exitcond_flatten15_n_fu_654_p2);

assign not_exitcond_flatten_fu_618_p2 = (exitcond_flatten1_fu_612_p2 ^ 1'd1);

assign output_img_address0 = tmp_13_reg_1387_pp3_iter1_reg;

assign output_img_d0 = x_assign_1_reg_1397;

assign p_shl1_cast_fu_580_p1 = tmp_7_fu_573_p3;

assign p_shl2_cast_fu_742_p1 = tmp_11_fu_734_p3;

assign p_shl3_cast_fu_925_p1 = tmp_24_fu_918_p3;

assign p_shl4_fu_949_p1 = tmp_30_fu_942_p3;

assign p_shl_cast_fu_460_p1 = p_shl_fu_452_p3;

assign p_shl_cast_mid1_fu_514_p1 = p_shl_mid1_fu_506_p3;

assign p_shl_fu_452_p3 = {{ap_phi_mux_m_phi_fu_276_p4}, {2'd0}};

assign p_shl_mid1_fu_506_p3 = {{m_2_fu_482_p2}, {2'd0}};

assign sum_cast_fu_559_p1 = sum_fu_554_p2;

assign sum_fu_554_p2 = ($signed(tmp_reg_1198) + $signed(tmp_13_cast_fu_550_p1));

assign tmp_10_fu_590_p2 = (tmp_2_fu_584_p2 + tmp_11_cast_reg_1219);

assign tmp_11_cast_fu_540_p1 = n_mid2_fu_494_p3;

assign tmp_11_fu_734_p3 = {{ap_phi_mux_m_1_phi_fu_342_p4}, {2'd0}};

assign tmp_13_cast_fu_550_p1 = $signed(tmp_8_fu_544_p2);

assign tmp_13_fu_1088_p1 = k_reg_371;

assign tmp_14_fu_746_p2 = (p_shl2_cast_fu_742_p1 - tmp_8_cast1_fu_730_p1);

assign tmp_15_fu_1107_p2 = (($signed(x_assign_fu_1097_p2) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign tmp_16_cast_fu_756_p1 = ap_phi_mux_n_1_phi_fu_353_p4;

assign tmp_16_fu_760_p2 = ($signed(tmp_32_cast_fu_752_p1) + $signed(tmp_16_cast_fu_756_p1));

assign tmp_16_mid1_fu_983_p1 = n_3_reg_1319;

assign tmp_17_cast_mid2_cas_fu_980_p1 = tmp_17_cast_mid2_reg_1325;

assign tmp_17_cast_mid2_fu_842_p3 = ((exitcond_flatten15_m_reg_1252[0:0] === 1'b1) ? n_3_fu_829_p2 : n_1_mid_fu_800_p3);

assign tmp_17_fu_766_p2 = (ap_phi_mux_n_1_phi_fu_353_p4 | ap_phi_mux_m_1_phi_fu_342_p4);

assign tmp_17_mid1_fu_1000_p2 = (tmp_8_cast_mid2_reg_1311 | n_3_reg_1319);

assign tmp_18_fu_772_p2 = ((tmp_17_fu_766_p2 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_18_mid1_fu_1004_p2 = ((tmp_17_mid1_fu_1000_p2 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_18_mid2_fu_1010_p3 = ((exitcond_flatten15_m_reg_1252_pp2_iter1_reg[0:0] === 1'b1) ? tmp_18_mid1_fu_1004_p2 : tmp_18_mid3_fu_974_p3);

assign tmp_18_mid3_fu_974_p3 = ((exitcond_flatten1_reg_1243_pp2_iter1_reg[0:0] === 1'b1) ? tmp_18_mid_fu_969_p2 : tmp_18_reg_1299);

assign tmp_18_mid_fu_969_p2 = ((m_3_reg_1304 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_19_cast_mid255_v_1_fu_965_p1 = $signed(tmp_19_cast_mid255_v_fu_959_p3);

assign tmp_19_cast_mid255_v_fu_959_p3 = ((exitcond_flatten1_reg_1243_pp2_iter1_reg[0:0] === 1'b1) ? tmp_35_cast_fu_935_p1 : tmp_16_reg_1294);

assign tmp_19_cast_mid2_v_fu_992_p3 = ((exitcond_flatten15_m_reg_1252_pp2_iter1_reg[0:0] === 1'b1) ? tmp_33_fu_986_p2 : tmp_19_cast_mid255_v_1_fu_965_p1);

assign tmp_19_fu_782_p2 = (i_1_reg_360 + tmp_8_cast_fu_726_p1);

assign tmp_19_mid1_fu_873_p2 = (i_3_fu_863_p2 + tmp_8_cast_mid2_cast_fu_814_p1);

assign tmp_1_fu_437_p1 = grp_fu_1125_p3;

assign tmp_20_fu_788_p0 = tmp_20_fu_788_p00;

assign tmp_20_fu_788_p00 = i_1_reg_360;

assign tmp_20_fu_788_p2 = (tmp_20_fu_788_p0 * $signed('h62));

assign tmp_20_mid2_fu_879_p3 = ((exitcond1_mid1_reg_1266[0:0] === 1'b1) ? tmp_19_mid1_fu_873_p2 : tmp_20_mid4_fu_849_p3);

assign tmp_20_mid4_fu_849_p3 = ((exitcond_flatten15_m_reg_1252[0:0] === 1'b1) ? tmp_8_cast_mid2_cast_fu_814_p1 : tmp_20_mid_fu_822_p3);

assign tmp_20_mid_fu_822_p3 = ((exitcond_flatten1_reg_1243[0:0] === 1'b1) ? tmp_8_mid1_cast1_fu_818_p1 : tmp_19_fu_782_p2);

assign tmp_21_fu_1073_p1 = bias[6:0];

assign tmp_21_mid1_fu_886_p0 = tmp_21_mid1_fu_886_p00;

assign tmp_21_mid1_fu_886_p00 = i_3_fu_863_p2;

assign tmp_21_mid1_fu_886_p2 = (tmp_21_mid1_fu_886_p0 * $signed('h62));

assign tmp_21_mid2_fu_892_p3 = ((exitcond1_mid1_reg_1266[0:0] === 1'b1) ? tmp_21_mid1_fu_886_p2 : tmp_21_mid_fu_856_p3);

assign tmp_21_mid_fu_856_p3 = ((tmp_32_reg_1260[0:0] === 1'b1) ? 14'd0 : tmp_20_fu_788_p2);

assign tmp_23_fu_1020_p2 = (j_1_mid2_reg_1273_pp2_iter1_reg + tmp_17_cast_mid2_cas_fu_980_p1);

assign tmp_24_fu_918_p3 = {{m_3_reg_1304}, {2'd0}};

assign tmp_25_fu_1041_p0 = IBRAM_q0;

assign tmp_25_fu_1041_p1 = WBRAM_q0;

assign tmp_25_fu_1041_p2 = ($signed(tmp_25_fu_1041_p0) * $signed(tmp_25_fu_1041_p1));

assign tmp_26_cast2_fu_906_p1 = j_1_mid2_reg_1273;

assign tmp_26_fu_929_p2 = (p_shl3_cast_fu_925_p1 - tmp_8_mid1_cast_fu_915_p1);

assign tmp_27_fu_909_p2 = (tmp_26_cast2_fu_906_p1 + tmp_21_mid2_fu_892_p3);

assign tmp_28_fu_1057_p1 = tmp_27_reg_1341_pp2_iter2_reg;

assign tmp_29_fu_1061_p2 = (temp_reg_1361 + OBRAM_q0);

assign tmp_2_fu_584_p2 = (p_shl1_cast_fu_580_p1 - tmp_7_mid2_cast_fu_570_p1);

assign tmp_30_cast_fu_595_p1 = $signed(tmp_10_fu_590_p2);

assign tmp_30_fu_942_p3 = {{tmp_8_cast_mid2_reg_1311}, {2'd0}};

assign tmp_31_fu_953_p2 = (p_shl4_fu_949_p1 - tmp_8_mid2_cast_fu_939_p1);

assign tmp_32_cast_fu_752_p1 = $signed(tmp_14_fu_746_p2);

assign tmp_32_fu_648_p2 = (exitcond_flatten1_fu_612_p2 | exitcond_flatten15_m_fu_642_p2);

assign tmp_33_fu_986_p2 = (tmp_31_fu_953_p2 + tmp_16_mid1_fu_983_p1);

assign tmp_34_fu_672_p2 = (exitcond_flatten15_m_fu_642_p2 | exitcond1_mid1_fu_666_p2);

assign tmp_35_cast_fu_935_p1 = $signed(tmp_26_fu_929_p2);

assign tmp_35_fu_678_p2 = (tmp_34_fu_672_p2 | exitcond_flatten1_fu_612_p2);

assign tmp_38_fu_1093_p1 = OBRAM_q0[6:0];

assign tmp_3_mid2_v_v_fu_414_p3 = ((exitcond1_fu_400_p2[0:0] === 1'b1) ? i_2_fu_394_p2 : ap_phi_mux_i_phi_fu_243_p4);

assign tmp_43_cast_fu_1029_p1 = grp_fu_1142_p3;

assign tmp_4_cast_fu_441_p1 = tmp_4_reg_1193;

assign tmp_5_cast7_fu_448_p1 = ap_phi_mux_m_phi_fu_276_p4;

assign tmp_5_cast7_mid1_fu_502_p1 = m_2_fu_482_p2;

assign tmp_6_fu_464_p2 = (p_shl_cast_fu_460_p1 - tmp_5_cast7_fu_448_p1);

assign tmp_6_mid1_fu_518_p2 = (p_shl_cast_mid1_fu_514_p1 - tmp_5_cast7_mid1_fu_502_p1);

assign tmp_6_mid2_fu_524_p3 = ((exitcond2_fu_488_p2[0:0] === 1'b1) ? tmp_6_mid1_fu_518_p2 : tmp_6_fu_464_p2);

assign tmp_7_fu_573_p3 = {{tmp_7_mid2_v_reg_1212}, {2'd0}};

assign tmp_7_mid2_cast_fu_570_p1 = tmp_7_mid2_v_reg_1212;

assign tmp_7_mid2_v_fu_532_p3 = ((exitcond2_fu_488_p2[0:0] === 1'b1) ? m_2_fu_482_p2 : ap_phi_mux_m_phi_fu_276_p4);

assign tmp_8_cast1_fu_730_p1 = ap_phi_mux_m_1_phi_fu_342_p4;

assign tmp_8_cast_fu_726_p1 = ap_phi_mux_m_1_phi_fu_342_p4;

assign tmp_8_cast_mid2_cast_fu_814_p1 = tmp_8_cast_mid2_fu_807_p3;

assign tmp_8_cast_mid2_fu_807_p3 = ((exitcond_flatten1_reg_1243[0:0] === 1'b1) ? m_3_fu_794_p2 : ap_phi_mux_m_1_phi_fu_342_p4);

assign tmp_8_fu_544_p2 = (tmp_11_cast_fu_540_p1 + tmp_6_mid2_fu_524_p3);

assign tmp_8_mid1_cast1_fu_818_p1 = m_3_fu_794_p2;

assign tmp_8_mid1_cast_fu_915_p1 = m_3_reg_1304;

assign tmp_8_mid2_cast_fu_939_p1 = tmp_8_cast_mid2_reg_1311;

assign tmp_9_cast_fu_434_p1 = j_mid2_reg_1171;

assign tmp_fu_445_p1 = kernel_offset[5:0];

assign x_assign_1_fu_1113_p3 = ((tmp_15_fu_1107_p2[0:0] === 1'b1) ? x_assign_cast_fu_1102_p2 : 7'd0);

assign x_assign_cast_fu_1102_p2 = (tmp_38_fu_1093_p1 + tmp_21_reg_1373);

assign x_assign_fu_1097_p2 = (bias + OBRAM_q0);

always @ (posedge ap_clk) begin
    tmp_11_cast_reg_1219[4:2] <= 3'b000;
    tmp_13_reg_1387[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    tmp_13_reg_1387_pp3_iter1_reg[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
end

endmodule //CONV
